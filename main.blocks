<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="Q]*D1N!RQMVzVetf{:Xa">哈哈</variable><variable id="7/XP0{`,xoUFt,=O{v^s">index</variable></variables><block type="pxt-on-start" id="t`reI?tmT(Fqaa06,(Cg" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="Nszd^}4c_~e~Gg5{kNhT"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Oled {" line1="" line2="    //% block=&quot; &quot;" line3="" line4="    oled1 = 0," line5="" line6="    //% block=&quot; &quot;" line7="" line8="    oled2 = 1," line9="" line10="    //% block=&quot; &quot;" line11="" line12="    oled3 = 2," line13="" line14="    //% block=&quot; &quot;" line15="" line16="    oled4 = 3," line17="" line18="    //% block=&quot; &quot;" line19="" line20="    oled5 = 4," line21="" line22="    //% block=&quot; &quot;" line23="" line24="    oled6 = 5," line25="" line26="    //% block=&quot; &quot;" line27="" line28="    oled7 = 6," line29="" line30="    //% block=&quot; &quot;" line31="" line32="    oled8 = 7," line33="" line34="    //% block=&quot; &quot;" line35="" line36="    oled9 = 8," line37="" line38="    //% block=&quot; &quot;" line39="" line40="    oled10 = 9," line41="" line42="    //% block=&quot; &quot;" line43="" line44="    oled11 = 10," line45="" line46="    //% block=&quot; &quot;" line47="" line48="    oled12 = 11," line49="" line50="    //% block=&quot; &quot;" line51="" line52="    oled13 = 12," line53="" line54="    //% block=&quot; &quot;" line55="" line56="    oled14 = 13," line57="" line58="    //% block=&quot; &quot;" line59="" line60="    oled15 = 14," line61="" line62="    //% block=&quot; &quot;" line63="" line64="    oled16 = 15," line65="" line66="    //% block=&quot; &quot;" line67="" line68="    oled17 = 16," line69="" line70="    //% block=&quot; &quot;" line71="" line72="    oled18 = 17," line73="" line74="    //% block=&quot; &quot;" line75="" line76="    oled19 = 18," line77="" line78="    //% block=&quot; &quot;" line79="" line80="    oled20 = 19," line81="" line82="    //% block=&quot; &quot;" line83="" line84="    oled21 = 20," line85="" line86="    //% block=&quot; &quot;" line87="" line88="    oled22 = 21," line89="" line90="    //% block=&quot; &quot;" line91="" line92="    oled23 = 22," line93="" line94="    //% block=&quot; &quot;" line95="" line96="    oled24 = 23," line97="" line98="    //% block=&quot; &quot;" line99="" line100="    oled25 = 24," line101="" line102="    //% block=&quot; &quot;" line103="" line104="    oled26 = 25," line105="" line106="    //% block=&quot; &quot;" line107="" line108="    oled27 = 26," line109="" line110="    //% block=&quot; &quot;" line111="" line112="    oled28 = 27," line113="" line114="    //% block=&quot; &quot;" line115="" line116="    oled29 = 28," line117="" line118="    //% block=&quot; &quot;" line119="" line120="    oled30 = 29," line121="" line122="    //% block=&quot; &quot;" line123="" line124="    oled31 = 30," line125="" line126="    //% block=&quot; &quot;" line127="" line128="    oled32 = 31," line129="" line130="    //% block=&quot; &quot;" line131="" line132="    oled33 = 32," line133="" line134="    //% block=&quot; &quot;" line135="" line136="    oled34 = 33," line137="" line138="    //% block=&quot; &quot;" line139="" line140="    oled35 = 34," line141="" line142="    //% block=&quot; &quot;" line143="" line144="    oled36 = 35," line145="" line146="    //% block=&quot; &quot;" line147="" line148="    oled37 = 36," line149="" line150="    //% block=&quot; &quot;" line151="" line152="    oled38 = 37," line153="" line154="    //% block=&quot; &quot;" line155="" line156="    oled39 = 38," line157="" line158="    //% block=&quot; &quot;" line159="" line160="    oled40 = 39," line161="" line162="    //% block=&quot; &quot;" line163="" line164="    oled41 = 40," line165="" line166="    //% block=&quot; &quot;" line167="" line168="    oled42 = 41," line169="" line170="    //% block=&quot; &quot;" line171="" line172="    oled43 = 42," line173="" line174="    //% block=&quot; &quot;" line175="" line176="    oled44 = 43," line177="" line178="    //% block=&quot; &quot;" line179="" line180="    oled45 = 44," line181="" line182="    //% block=&quot; &quot;" line183="" line184="    oled46 = 45," line185="" line186="    //% block=&quot; &quot;" line187="" line188="    oled47 = 46," line189="" line190="    //% block=&quot; &quot;" line191="" line192="    oled48 = 47," line193="" line194="    //% block=&quot; &quot;" line195="" line196="    oled49 = 48," line197="" line198="    //% block=&quot; &quot;" line199="" line200="    oled50 = 49," line201="" line202="    //% block=&quot; &quot;" line203="" line204="    oled51 = 50," line205="" line206="    //% block=&quot; &quot;" line207="" line208="    oled52 = 51," line209="" line210="" line211="" line212="" line213="" line214="}" numlines="215"></mutation><next><block type="typescript_statement" id="Xn]z~p(yvpD?t5:,,rm%"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Write_pin {" line1="" line2="    //% block=&quot;P0&quot;" line3="" line4="    w0 = 1," line5="" line6="    //% block=&quot;P16&quot;" line7="" line8="    w1 = 2," line9="" line10="    //% block=&quot;P1&quot;" line11="" line12="    w2 = 3," line13="" line14="    //% block=&quot;P12&quot;" line15="" line16="    w3 = 4," line17="" line18="    //% block=&quot;P2&quot;" line19="" line20="    w4 = 5," line21="" line22="    //% block=&quot;P8&quot;" line23="" line24="    w5 = 6" line25="" line26="" line27="" line28="}" numlines="29"></mutation><next><block type="typescript_statement" id="!W#vk*TzNO$JSTs76eHE"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Read_pin {" line1="" line2="    //% block=&quot;P0&quot;" line3="" line4="    r0 = 1," line5="" line6="    //% block=&quot;P1&quot;" line7="" line8="    r1 = 2," line9="" line10="    //% block=&quot;P2&quot;" line11="" line12="    r2 = 3" line13="" line14="" line15="" line16="}" numlines="17"></mutation><next><block type="typescript_statement" id="GL^Mhva]F-VG.T(k5r;7"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Ultrasonic_pin {" line1="" line2="    //% block=&quot;(P0,P13)&quot;" line3="" line4="    u1 = 13," line5="" line6="    //% block=&quot;(P16,P10)&quot;" line7="" line8="    u2 = 1610," line9="" line10="    //% block=&quot;(P1,P14)&quot;" line11="" line12="    u3 = 114," line13="" line14="    //% block=&quot;(P12,P9)&quot;" line15="" line16="    u4 = 129," line17="" line18="    //% block=&quot;(P2,P15)&quot;" line19="" line20="    u5 = 215," line21="" line22="    //% block=&quot;(P8,P7)&quot;" line23="" line24="    u6 = 87" line25="" line26="}" numlines="27"></mutation><next><block type="typescript_statement" id="EgT+8KEQ$di,G:sz])jM"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Recodpin {" line1="" line2="    //% block=&quot;(P0,P13)&quot;" line3="" line4="    rc1 = 13," line5="    //% block=&quot;(P1,P14)&quot;" line6="" line7="    rc2 = 114," line8="" line9="    //% block=&quot;(P2,P15)&quot;" line10="" line11="    rc3 = 215" line12="" line13="}" numlines="14"></mutation><next><block type="typescript_statement" id="@cAr,K{@5q4Y!;6z~Iz?"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Record_list {//" line1="" line2="    //% block=&quot;machine gun burst&quot;" line3="" line4="    rl1 = 1," line5="" line6="    //% block=&quot;laser fire&quot;" line7="" line8="    rl2 = 2," line9="" line10="    //% block=&quot;racing acceleration&quot;" line11="" line12="    rl3 = 3," line13="    //% block=&quot;battle start&quot;" line14="" line15="    rl4 = 4," line16="    //% block=&quot;countdown&quot;" line17="" line18="    rl5 = 5," line19="    //% block=&quot;recorded audio&quot;" line20="" line21="    rl6 = 6" line22="" line23="}" numlines="24"></mutation><next><block type="typescript_statement" id="o5~-cu*#~3F-;GW.3]p$"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum PingUnit {" line1="" line2="    //% block=&quot;centimeters&quot;" line3="" line4="    Centimeters," line5="" line6="    //% block=&quot;microseconds&quot;" line7="" line8="    MicroSeconds," line9="" line10="" line11="" line12="    //% block=&quot;inches&quot;" line13="" line14="    Inches" line15="" line16="}" numlines="17"></mutation><next><block type="typescript_statement" id="e4t%_avqN)L(Phr|1)(`"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Grayscale_pin {" line1="" line2="    //% block=&quot;P13&quot;" line3="" line4="    g0 = 1," line5="" line6="    //% block=&quot;P16&quot;" line7="" line8="    g1 = 2," line9="" line10="    //% block=&quot;P0&quot;" line11="" line12="    g2 = 3," line13="" line14="    //% block=&quot;P10&quot;" line15="" line16="    g3 = 4," line17="" line18="    //% block=&quot;P14&quot;" line19="" line20="    g4 = 5," line21="" line22="    //% block=&quot;P12&quot;" line23="" line24="    g5 = 6," line25="" line26="    //% block=&quot;P1&quot;" line27="" line28="    g6 = 7," line29="" line30="    //% block=&quot;P9&quot;" line31="" line32="    g7 = 8," line33="" line34="    //% block=&quot;P15&quot;" line35="" line36="    g8 = 9," line37="" line38="    //% block=&quot;P8&quot;" line39="" line40="    g9 = 10," line41="" line42="    //% block=&quot;P2&quot;" line43="" line44="    g10 = 11," line45="" line46="    //% block=&quot;P7&quot;" line47="" line48="    g11 = 12" line49="" line50="}" numlines="51"></mutation><next><block type="typescript_statement" id="abTPf0p}d,Ir6|o%$6eB"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum gs {" line1="" line2="    //% block=&quot;up&quot;" line3="" line4="    g0 = 1," line5="" line6="    //% block=&quot;down&quot;" line7="" line8="    g1 = 2," line9="" line10="    //% block=&quot;left&quot;" line11="" line12="    g2 = 3," line13="" line14="    //% block=&quot;right&quot;" line15="" line16="    g3 = 4" line17="" line18="" line19="" line20="}" numlines="21"></mutation><next><block type="typescript_statement" id=".`p84B~rj+p|JpNGXRX:"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum PINs {" line1="" line2="    P0," line3="" line4="    P1," line5="" line6="    P2," line7="" line8="    P3," line9="" line10="    P4," line11="" line12="    P5," line13="" line14="    P6," line15="" line16="    P7," line17="" line18="    P8," line19="" line20="    P9," line21="" line22="    P10," line23="" line24="    P11," line25="" line26="    P12," line27="" line28="    P13," line29="" line30="    P14," line31="" line32="    P15," line33="" line34="    P16," line35="" line36="    P19," line37="" line38="    P20" line39="" line40="}" numlines="41"></mutation><next><block type="typescript_statement" id="wAe|-|,6XJJ%ZrYWTYT?"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum TMP36Type {" line1="" line2="    //% block=&quot;(℃)&quot; enumval=0" line3="" line4="    TMP36_temperature_C," line5="" line6="" line7="" line8="    //% block=&quot;(℉)&quot; enumval=1" line9="" line10="    TMP36_temperature_F," line11="" line12="}" numlines="13"></mutation><next><block type="typescript_statement" id="xijab9`4corTmq=c8l{r"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum RGB {" line1="" line2="    //% block=&quot;red&quot;" line3="" line4="    RED," line5="" line6="    //% block=&quot;green&quot;" line7="" line8="    GREEN," line9="" line10="    //% block=&quot;blue&quot;" line11="" line12="    BLUE," line13="" line14="    //% block=&quot;clear&quot;" line15="" line16="    CLEAR" line17="" line18="}" numlines="19"></mutation><next><block type="typescript_statement" id="HiC|rGtmYy^/8BdJn-K1"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelColors {" line1="" line2="    //% block=red" line3="" line4="    Red = 0xFF0000," line5="" line6="    //% block=orange" line7="" line8="    Orange = 0xFFA500," line9="" line10="    //% block=yellow" line11="" line12="    Yellow = 0xFFFF00," line13="" line14="    //% block=green" line15="" line16="    Green = 0x00FF00," line17="" line18="    //% block=blue" line19="" line20="    Blue = 0x0000FF," line21="" line22="    //% block=indigo" line23="" line24="    Indigo = 0x4b0082," line25="" line26="    //% block=violet" line27="" line28="    Violet = 0x8a2be2," line29="" line30="    //% block=purple" line31="" line32="    Purple = 0xFF00FF," line33="" line34="    //% block=white" line35="" line36="    White = 0xFFFFFF," line37="" line38="    //% block=black" line39="" line40="    Black = 0x000000" line41="" line42="}" numlines="43"></mutation><next><block type="typescript_statement" id="%{#}5!b?,A#=/D$qPR;n"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelMode {" line1="" line2="    //% block=&quot;GRB&quot;" line3="" line4="    RGB = 1," line5="" line6="    //% block=&quot;RGB+W&quot;" line7="" line8="    RGBW = 2," line9="" line10="    //% block=&quot;RGB&quot;" line11="" line12="    RGB_RGB = 3" line13="" line14="}" numlines="15"></mutation><next><block type="typescript_statement" id="H-~H]jNblW[Z585nhp44"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Microbit {" line1="" line2="" line3="" line4="    export enum DHT11_state {" line5="" line6="        //% block=&quot;temperature(℃)&quot; enumval=0" line7="" line8="        DHT11_temperature_C," line9="" line10="" line11="" line12="        //% block=&quot;humidity(0~100)&quot; enumval=1" line13="" line14="        DHT11_humidity," line15="" line16="    }" line17="" line18="" line19="" line20="    export enum Distance_Unit_List {" line21="" line22="        //% block=&quot;centimeters&quot; " line23="" line24="        Distance_Unit_cm," line25="" line26="" line27="" line28="        //% block=&quot;inches&quot;" line29="" line30="        Distance_Unit_inch," line31="" line32="    }" line33="" line34="" line35="" line36="    //% blockId=buttonState" line37="" line38="    //% weight=27" line39="" line40="    //% buttonpin.fieldEditor=&quot;gridpicker&quot;" line41="" line42="    //% buttonpin.fieldOptions.width=220" line43="" line44="    //% buttonpin.fieldOptions.columns=2" line45="" line46="    //% block=&quot;Button Sensor %buttonpin&quot;" line47="" line48="    //% subcategory=Sensor" line49="" line50="    export function buttonState(buttonpin: Write_pin): number {" line51="" line52="        let pin16" line53="" line54="        if (buttonpin == 1) {" line55="" line56="" line57="" line58="            pin16 = DigitalPin.P0;" line59="" line60="        }" line61="" line62="        if (buttonpin == 2) {" line63="" line64="            pin16 = DigitalPin.P16;" line65="" line66="        }" line67="" line68="        if (buttonpin == 3) {" line69="" line70="            pin16 = DigitalPin.P1;" line71="" line72="        }" line73="" line74="        if (buttonpin == 4) {" line75="" line76="" line77="" line78="            pin16 = DigitalPin.P12;" line79="" line80="        }" line81="" line82="        if (buttonpin == 5) {" line83="" line84="            pin16 = DigitalPin.P2;" line85="" line86="        }" line87="" line88="        if (buttonpin == 6) {" line89="" line90="            pin16 = DigitalPin.P8;" line91="" line92="        }" line93="" line94="" line95="" line96="" line97="" line98="        return pins.digitalReadPin(pin16);" line99="" line100="    }" line101="" line102="" line103="" line104="    //% blockId=hState" line105="" line106="    //% weight=27" line107="" line108="    //% hallpin.fieldEditor=&quot;gridpicker&quot;" line109="" line110="    //% hallpin.fieldOptions.width=220" line111="" line112="    //% hallpin.fieldOptions.columns=1" line113="" line114="    //% block=&quot;Hall Sensor %hallpin&quot;" line115="" line116="    //% subcategory=Sensor" line117="" line118="    export function hState(hallpin: Read_pin): number {" line119="" line120="        let pin18" line121="" line122="        if (hallpin == 1) {" line123="" line124="" line125="" line126="            pin18 = AnalogPin.P0;" line127="" line128="        }" line129="" line130="        if (hallpin == 2) {" line131="" line132="            pin18 = AnalogPin.P1;" line133="" line134="        }" line135="" line136="        if (hallpin == 3) {" line137="" line138="            pin18 = AnalogPin.P2;" line139="" line140="        }" line141="        if (pins.analogReadPin(pin18) &lt; 512)" line142="            return (0);" line143="        else" line144="            return (1);" line145="" line146="    }" line147="" line148="" line149="" line150="    //% blockId=farState" line151="" line152="    //% weight=38" line153="" line154="    //% farStatepin.fieldEditor=&quot;gridpicker&quot;" line155="" line156="    //% farStatepin.fieldOptions.width=220" line157="" line158="    //% farStatepin.fieldOptions.columns=2" line159="" line160="    //% block=&quot;Long-range Photoelectric Sensor %farStatepin&quot;" line161="" line162="    //% subcategory=Sensor" line163="" line164="    export function farState(farStatepin: Write_pin): number {" line165="" line166="        let pin17" line167="" line168="        if (farStatepin == 1) {" line169="" line170="" line171="" line172="            pin17 = DigitalPin.P0;" line173="" line174="        }" line175="" line176="        if (farStatepin == 2) {" line177="" line178="            pin17 = DigitalPin.P16;" line179="" line180="        }" line181="" line182="        if (farStatepin == 3) {" line183="" line184="            pin17 = DigitalPin.P1;" line185="" line186="        }" line187="" line188="        if (farStatepin == 4) {" line189="" line190="" line191="" line192="            pin17 = DigitalPin.P12;" line193="" line194="        }" line195="" line196="        if (farStatepin == 5) {" line197="" line198="            pin17 = DigitalPin.P2;" line199="" line200="        }" line201="" line202="        if (farStatepin == 6) {" line203="" line204="            pin17 = DigitalPin.P8;" line205="" line206="        }" line207="" line208="        return pins.digitalReadPin(pin17);" line209="" line210="    }" line211="" line212="" line213="" line214="    //% blockId=potentiometerRead" line215="" line216="    //% weight=37" line217="" line218="    //% potentiometerpin.fieldEditor=&quot;gridpicker&quot;" line219="" line220="    //% potentiometerpin.fieldOptions.width=220" line221="" line222="    //% potentiometerpin.fieldOptions.columns=1" line223="" line224="    //% block=&quot;Potentiometer %potentiometerpin&quot;" line225="" line226="    //% subcategory=Sensor" line227="" line228="    export function potentiometerRead(potentiometerpin: Read_pin): number {" line229="" line230="        let pin15" line231="" line232="        if (potentiometerpin == 1) {" line233="" line234="" line235="" line236="            pin15 = AnalogPin.P0;" line237="" line238="        }" line239="" line240="        if (potentiometerpin == 2) {" line241="" line242="            pin15 = AnalogPin.P1;" line243="" line244="        }" line245="" line246="        if (potentiometerpin == 3) {" line247="" line248="            pin15 = AnalogPin.P2;" line249="" line250="        }" line251="" line252="        return pins.analogReadPin(pin15);" line253="" line254="    }" line255="" line256="" line257="" line258="    //% blockId=&quot;ReadGrayLevel&quot; block=&quot;Grayscale Sensor %graylevelpin&quot;" line259="" line260="    //% weight=36" line261="" line262="    //% graylevelpin.fieldEditor=&quot;gridpicker&quot;" line263="" line264="    //% graylevelpin.fieldOptions.width=220" line265="" line266="    //% graylevelpin.fieldOptions.columns=1" line267="" line268="    //% subcategory=Sensor" line269="" line270="    export function ReadGrayLevel(graylevelpin: Read_pin): number {" line271="" line272="        let voltage7 = 0;" line273="" line274="        let grayLevel = 0;" line275="" line276="        let pin13" line277="" line278="        if (graylevelpin == 1) {" line279="" line280="" line281="" line282="            pin13 = AnalogPin.P0;" line283="" line284="        }" line285="" line286="        if (graylevelpin == 2) {" line287="" line288="            pin13 = AnalogPin.P1;" line289="" line290="        }" line291="" line292="        if (graylevelpin == 3) {" line293="" line294="            pin13 = AnalogPin.P2;" line295="" line296="        }" line297="" line298="        voltage7 = pins.map(" line299="" line300="            pins.analogReadPin(pin13)," line301="" line302="            0," line303="" line304="            1023," line305="" line306="            80," line307="" line308="            1023" line309="" line310="        );" line311="" line312="        grayLevel = voltage7;" line313="" line314="        return Math.round(grayLevel);" line315="" line316="    }" line317="" line318="" line319="" line320="    //% blockId=&quot;readlightintensity&quot; block=&quot;Photosensitive Sensor %lightintensitypin&quot;" line321="" line322="    //% weight=35" line323="" line324="    //% lightintensitypin.fieldEditor=&quot;gridpicker&quot;" line325="" line326="    //% lightintensitypin.fieldOptions.width=220" line327="" line328="    //% lightintensitypin.fieldOptions.columns=1" line329="" line330="    //% subcategory=Sensor" line331="" line332="    export function ReadLightIntensity(lightintensitypin: Read_pin): number {" line333="" line334="        let voltage2 = 0;" line335="" line336="        let lightintensity = 0;" line337="" line338="        let pin2" line339="" line340="        if (lightintensitypin == 1) {" line341="" line342="            pin2 = AnalogPin.P0;" line343="" line344="" line345="" line346="        }" line347="" line348="        if (lightintensitypin == 2) {" line349="" line350="            pin2 = AnalogPin.P1;" line351="" line352="        }" line353="" line354="        if (lightintensitypin == 3) {" line355="" line356="            pin2 = AnalogPin.P2;" line357="" line358="" line359="" line360="        }" line361="" line362="        voltage2 = pins.map(" line363="" line364="            pins.analogReadPin(pin2)," line365="" line366="            0," line367="" line368="            1023," line369="" line370="            0," line371="" line372="            1023" line373="" line374="        );" line375="" line376="        lightintensity = voltage2;" line377="" line378="        return Math.round(1023 - lightintensity);" line379="" line380="" line381="" line382="    }" line383="" line384="" line385="" line386="    //% blockId=&quot;Readflame&quot; block=&quot;Flame Sensor %flamepin&quot;" line387="" line388="    //% weight=34" line389="" line390="    //% flamepin.fieldEditor=&quot;gridpicker&quot;" line391="" line392="    //% flamepin.fieldOptions.width=220" line393="" line394="    //% flamepin.fieldOptions.columns=1" line395="" line396="    //% subcategory=Sensor" line397="" line398="    export function Readflame(flamepin: Read_pin): number {" line399="" line400="        let voltage6 = 0;" line401="" line402="        let flame = 0;" line403="" line404="        let pin12" line405="" line406="        if (flamepin == 1) {" line407="" line408="" line409="" line410="            pin12 = AnalogPin.P0;" line411="" line412="        }" line413="" line414="        if (flamepin == 2) {" line415="" line416="            pin12 = AnalogPin.P1;" line417="" line418="        }" line419="" line420="        if (flamepin == 3) {" line421="" line422="            pin12 = AnalogPin.P2;" line423="" line424="        }" line425="" line426="        voltage6 = pins.map(" line427="" line428="            pins.analogReadPin(pin12)," line429="" line430="            0," line431="" line432="            1023," line433="" line434="            0," line435="" line436="            1023" line437="" line438="        );" line439="" line440="        flame = voltage6;" line441="" line442="        return Math.round(1023 - flame);" line443="" line444="    }" line445="" line446="" line447="" line448="    //% blockId=&quot;octopus_ReadWaterLevel&quot; block=&quot;Water Level Sensor %waterlevelpin&quot;" line449="" line450="    //% weight=33" line451="" line452="    //% waterlevelpin.fieldEditor=&quot;gridpicker&quot;" line453="" line454="    //% waterlevelpin.fieldOptions.width=220" line455="" line456="    //% waterlevelpin.fieldOptions.columns=1" line457="" line458="    //% subcategory=Sensor" line459="" line460="" line461="" line462="    export function ReadWaterLevel(waterlevelpin: Read_pin): number {" line463="" line464="        let voltage4 = 0;" line465="" line466="        let waterLevel = 0;" line467="" line468="        let pin10" line469="" line470="        if (waterlevelpin == 1) {" line471="" line472="" line473="" line474="            pin10 = AnalogPin.P0;" line475="" line476="        }" line477="" line478="        if (waterlevelpin == 2) {" line479="" line480="            pin10 = AnalogPin.P1;" line481="" line482="        }" line483="" line484="        if (waterlevelpin == 3) {" line485="" line486="            pin10 = AnalogPin.P2;" line487="" line488="        }" line489="" line490="        voltage4 = pins.analogReadPin(pin10);" line491="" line492="        if (voltage4 &gt; 620) { waterLevel = 100; }" line493="" line494="        else if (voltage4 &gt; 618) { waterLevel = 98; }" line495="" line496="        else if (voltage4 &gt; 617) { waterLevel = 96; }" line497="" line498="        else if (voltage4 &gt; 616) { waterLevel = 94; }" line499="" line500="        else if (voltage4 &gt; 614) { waterLevel = 92; }" line501="" line502="        else if (voltage4 &gt; 612) { waterLevel = 90; }" line503="" line504="        else if (voltage4 &gt; 610) { waterLevel = 88; }" line505="" line506="        else if (voltage4 &gt; 609) { waterLevel = 86; }" line507="" line508="        else if (voltage4 &gt; 607) { waterLevel = 85; }" line509="" line510="        else if (voltage4 &gt; 606) { waterLevel = 83; }" line511="" line512="        else if (voltage4 &gt; 605) { waterLevel = 81; }" line513="" line514="        else if (voltage4 &gt; 604) { waterLevel = 80; }" line515="" line516="        else if (voltage4 &gt; 603) { waterLevel = 78; }" line517="" line518="        else if (voltage4 &gt; 602) { waterLevel = 77; }" line519="" line520="        else if (voltage4 &gt; 600) { waterLevel = 75; }" line521="" line522="        else if (voltage4 &gt; 598) { waterLevel = 73; }" line523="" line524="        else if (voltage4 &gt; 596) { waterLevel = 72; }" line525="" line526="        else if (voltage4 &gt; 594) { waterLevel = 70; }" line527="" line528="        else if (voltage4 &gt; 592) { waterLevel = 68; }" line529="" line530="        else if (voltage4 &gt; 590) { waterLevel = 65; }" line531="" line532="        else if (voltage4 &gt; 588) { waterLevel = 63; }" line533="" line534="        else if (voltage4 &gt; 586) { waterLevel = 62; }" line535="" line536="        else if (voltage4 &gt; 583) { waterLevel = 60; }" line537="" line538="        else if (voltage4 &gt; 580) { waterLevel = 58; }" line539="" line540="        else if (voltage4 &gt; 575) { waterLevel = 56; }" line541="" line542="        else if (voltage4 &gt; 574) { waterLevel = 55; }" line543="" line544="        else if (voltage4 &gt; 573) { waterLevel = 54; }" line545="" line546="" line547="" line548="        else if (voltage4 &gt; 572) { waterLevel = 53; }" line549="" line550="        else if (voltage4 &gt; 570) { waterLevel = 52; }" line551="" line552="        else if (voltage4 &gt; 568) { waterLevel = 51; }" line553="" line554="        else if (voltage4 &gt; 566) { waterLevel = 50; }" line555="" line556="        else if (voltage4 &gt; 563) { waterLevel = 49; }" line557="" line558="        else if (voltage4 &gt; 560) { waterLevel = 48; }" line559="" line560="        else if (voltage4 &gt; 557) { waterLevel = 47; }" line561="" line562="        else if (voltage4 &gt; 554) { waterLevel = 46; }" line563="" line564="        else if (voltage4 &gt; 551) { waterLevel = 45; }" line565="" line566="        else if (voltage4 &gt; 548) { waterLevel = 44; }" line567="" line568="        else if (voltage4 &gt; 545) { waterLevel = 43; }" line569="" line570="        else if (voltage4 &gt; 542) { waterLevel = 42; }" line571="" line572="        else if (voltage4 &gt; 539) { waterLevel = 41; }" line573="" line574="        else if (voltage4 &gt; 536) { waterLevel = 40; }" line575="" line576="        else if (voltage4 &gt; 533) { waterLevel = 39; }" line577="" line578="        else if (voltage4 &gt; 530) { waterLevel = 38; }" line579="" line580="        else if (voltage4 &gt; 527) { waterLevel = 37; }" line581="" line582="        else if (voltage4 &gt; 523) { waterLevel = 36; }" line583="" line584="        else if (voltage4 &gt; 516) { waterLevel = 35; }" line585="" line586="        else if (voltage4 &gt; 510) { waterLevel = 34; }" line587="" line588="        else if (voltage4 &gt; 506) { waterLevel = 33; }" line589="" line590="        else if (voltage4 &gt; 500) { waterLevel = 32; }" line591="" line592="        else if (voltage4 &gt; 497) { waterLevel = 31; }" line593="" line594="        else if (voltage4 &gt; 494) { waterLevel = 30; }" line595="" line596="        else if (voltage4 &gt; 481) { waterLevel = 29; }" line597="" line598="        else if (voltage4 &gt; 478) { waterLevel = 28; }" line599="" line600="        else if (voltage4 &gt; 475) { waterLevel = 27; }" line601="" line602="        else if (voltage4 &gt; 472) { waterLevel = 26; }" line603="" line604="        else if (voltage4 &gt; 469) { waterLevel = 25; }" line605="" line606="        else if (voltage4 &gt; 466) { waterLevel = 24; }" line607="" line608="        else if (voltage4 &gt; 463) { waterLevel = 23; }" line609="" line610="        else if (voltage4 &gt; 460) { waterLevel = 22; }" line611="" line612="        else if (voltage4 &gt; 457) { waterLevel = 21; }" line613="" line614="        else if (voltage4 &gt; 454) { waterLevel = 19; }" line615="" line616="        else if (voltage4 &gt; 451) { waterLevel = 18; }" line617="" line618="        else if (voltage4 &gt; 448) { waterLevel = 17; }" line619="" line620="        else if (voltage4 &gt; 445) { waterLevel = 16; }" line621="" line622="        else if (voltage4 &gt; 442) { waterLevel = 15; }" line623="" line624="        else if (voltage4 &gt; 439) { waterLevel = 14; }" line625="" line626="        else if (voltage4 &gt; 436) { waterLevel = 13; }" line627="" line628="        else if (voltage4 &gt; 433) { waterLevel = 12; }" line629="" line630="        else if (voltage4 &gt; 430) { waterLevel = 11; }" line631="" line632="        else if (voltage4 &gt; 427) { waterLevel = 10; }" line633="" line634="        else if (voltage4 &gt; 424) { waterLevel = 9; }" line635="" line636="        else if (voltage4 &gt; 421) { waterLevel = 8; }" line637="" line638="        else if (voltage4 &gt; 418) { waterLevel = 7; }" line639="" line640="        else if (voltage4 &gt; 415) { waterLevel = 6; }" line641="" line642="        else if (voltage4 &gt; 412) { waterLevel = 5; }" line643="" line644="        else if (voltage4 &gt; 409) { waterLevel = 4; }" line645="" line646="        else if (voltage4 &gt; 406) { waterLevel = 3; }" line647="" line648="        else if (voltage4 &gt; 403) { waterLevel = 2; }" line649="" line650="        else if (voltage4 &gt; 400) { waterLevel = 1; }" line651="" line652="        else { waterLevel = 0; }" line653="" line654="" line655="" line656="        return Math.round(waterLevel);" line657="" line658="    }" line659="" line660="" line661="" line662="    //% blockId=&quot;ReadGasConcentration&quot; block=&quot;MQ-2 Gas Sensor %gasconcentrationpin&quot;" line663="" line664="    //% weight=32" line665="" line666="    //% gasconcentrationpin.fieldEditor=&quot;gridpicker&quot;" line667="" line668="    //% gasconcentrationpin.fieldOptions.width=220" line669="" line670="    //% gasconcentrationpin.fieldOptions.columns=1" line671="" line672="    //% subcategory=Sensor" line673="" line674="    export function ReadGasConcentration(gasconcentrationpin: Read_pin): number {" line675="" line676="        let voltage5 = 0;" line677="" line678="        let gasConcentration = 0;" line679="" line680="        let pin11" line681="" line682="        if (gasconcentrationpin == 1) {" line683="" line684="" line685="" line686="            pin11 = AnalogPin.P0;" line687="" line688="        }" line689="" line690="        if (gasconcentrationpin == 2) {" line691="" line692="            pin11 = AnalogPin.P1;" line693="" line694="        }" line695="" line696="        if (gasconcentrationpin == 3) {" line697="" line698="            pin11 = AnalogPin.P2;" line699="" line700="        }" line701="" line702="        voltage5 = pins.map(" line703="" line704="            pins.analogReadPin(pin11)," line705="" line706="            0," line707="" line708="            1023," line709="" line710="            0," line711="" line712="            1023" line713="" line714="        );" line715="" line716="        gasConcentration = voltage5;" line717="" line718="        return Math.round(gasConcentration);" line719="" line720="    }" line721="" line722="" line723="" line724="    //% blockId=&quot;readsoilmoisture&quot; block=&quot;Soil moisture Sensor %soilhumiditypin&quot;" line725="" line726="    //% weight=31" line727="" line728="    //% soilmoisturepin.fieldEditor=&quot;gridpicker&quot;" line729="" line730="    //% soilmoisturepin.fieldOptions.width=220" line731="" line732="    //% soilmoisturepin.fieldOptions.columns=1" line733="" line734="    //% subcategory=Sensor" line735="" line736="    export function ReadSoilHumidity(soilmoisturepin: Read_pin): number {" line737="" line738="        let voltage = 0;" line739="" line740="        let soilmoisture = 0;" line741="" line742="        let pin" line743="" line744="        if (soilmoisturepin == 1) {" line745="" line746="            pin = AnalogPin.P0;" line747="" line748="        }" line749="" line750="        if (soilmoisturepin == 2) {" line751="" line752="            pin = AnalogPin.P1;" line753="" line754="        }" line755="" line756="        if (soilmoisturepin == 3) {" line757="" line758="            pin = AnalogPin.P2;" line759="" line760="" line761="" line762="        }" line763="" line764="        voltage = pins.map(" line765="" line766="            pins.analogReadPin(pin)," line767="" line768="            0," line769="" line770="            1023," line771="" line772="            0," line773="" line774="            1023" line775="" line776="        );" line777="" line778="        soilmoisture = voltage;" line779="" line780="        return Math.round(soilmoisture);" line781="" line782="    }" line783="" line784="" line785="" line786="    //% blockId=&quot;readWaterTemp&quot; block=&quot;Temperature Sensor %waterproofpin&quot;" line787="" line788="    //% weight=30" line789="" line790="    //% waterproofpin.fieldEditor=&quot;gridpicker&quot;" line791="" line792="    //% waterproofpin.fieldOptions.width=220" line793="" line794="    //% waterproofpin.fieldOptions.columns=1" line795="" line796="    //% subcategory=Sensor" line797="" line798="    export function readWaterTemp(waterproofpin: Read_pin): number {" line799="" line800="        let voltage22 = 0;" line801="" line802="        let waterProofTemp = 0;" line803="" line804="        let pin14" line805="" line806="        if (waterproofpin == 1) {" line807="" line808="" line809="" line810="            pin14 = AnalogPin.P0;" line811="" line812="        }" line813="" line814="        if (waterproofpin == 2) {" line815="" line816="            pin14 = AnalogPin.P1;" line817="" line818="        }" line819="" line820="        if (waterproofpin == 3) {" line821="" line822="            pin14 = AnalogPin.P2;" line823="" line824="        }" line825="" line826="        voltage22 = pins.analogReadPin(pin14);//%获得原始值" line827="" line828="        if (voltage22 &gt; 1001) { waterProofTemp = 100; }" line829="" line830="        else if (voltage22 &gt; 1000) { waterProofTemp = 98; }" line831="" line832="        else if (voltage22 &gt; 999) { waterProofTemp = 97; }" line833="" line834="        else if (voltage22 &gt; 998) { waterProofTemp = 96; }" line835="" line836="        else if (voltage22 &gt; 997) { waterProofTemp = 95; }" line837="" line838="        else if (voltage22 &gt; 996) { waterProofTemp = 93; }" line839="" line840="        else if (voltage22 &gt; 995) { waterProofTemp = 92; }" line841="" line842="        else if (voltage22 &gt; 994) { waterProofTemp = 91; }" line843="" line844="        else if (voltage22 &gt; 993) { waterProofTemp = 90; }" line845="" line846="        else if (voltage22 &gt; 992) { waterProofTemp = 89; }" line847="" line848="        else if (voltage22 &gt; 991) { waterProofTemp = 88; }" line849="" line850="        else if (voltage22 &gt; 990) { waterProofTemp = 87; }" line851="" line852="        else if (voltage22 &gt; 989) { waterProofTemp = 86; }" line853="" line854="        else if (voltage22 &gt; 988) { waterProofTemp = 85; }" line855="" line856="        else if (voltage22 &gt; 987) { waterProofTemp = 84; }" line857="" line858="        else if (voltage22 &gt; 986) { waterProofTemp = 83; }" line859="" line860="        else if (voltage22 &gt; 985) { waterProofTemp = 82; }" line861="" line862="        else if (voltage22 &gt; 984) { waterProofTemp = 81; }" line863="" line864="        else if (voltage22 &gt; 982) { waterProofTemp = 80; }" line865="" line866="        else if (voltage22 &gt; 981) { waterProofTemp = 79; }" line867="" line868="        else if (voltage22 &gt; 980) { waterProofTemp = 78; }" line869="" line870="        else if (voltage22 &gt; 978) { waterProofTemp = 77; }" line871="" line872="        else if (voltage22 &gt; 977) { waterProofTemp = 76; }" line873="" line874="        else if (voltage22 &gt; 975) { waterProofTemp = 75; }" line875="" line876="        else if (voltage22 &gt; 974) { waterProofTemp = 74; }" line877="" line878="        else if (voltage22 &gt; 972) { waterProofTemp = 73; }" line879="" line880="        else if (voltage22 &gt; 971) { waterProofTemp = 72; }" line881="" line882="        else if (voltage22 &gt; 969) { waterProofTemp = 71; }" line883="" line884="        else if (voltage22 &gt; 967) { waterProofTemp = 70; }" line885="" line886="        else if (voltage22 &gt; 965) { waterProofTemp = 69; }" line887="" line888="        else if (voltage22 &gt; 963) { waterProofTemp = 68; }" line889="" line890="        else if (voltage22 &gt; 961) { waterProofTemp = 67; }" line891="" line892="        else if (voltage22 &gt; 959) { waterProofTemp = 66; }" line893="" line894="        else if (voltage22 &gt; 957) { waterProofTemp = 65; }" line895="" line896="        else if (voltage22 &gt; 955) { waterProofTemp = 64; }" line897="" line898="        else if (voltage22 &gt; 953) { waterProofTemp = 63; }" line899="" line900="        else if (voltage22 &gt; 950) { waterProofTemp = 62; }" line901="" line902="        else if (voltage22 &gt; 948) { waterProofTemp = 61; }" line903="" line904="        else if (voltage22 &gt; 943) { waterProofTemp = 59; }" line905="" line906="        else if (voltage22 &gt; 940) { waterProofTemp = 58; }" line907="" line908="        else if (voltage22 &gt; 937) { waterProofTemp = 57; }" line909="" line910="        else if (voltage22 &gt; 934) { waterProofTemp = 56; }" line911="" line912="        else if (voltage22 &gt; 931) { waterProofTemp = 55; }" line913="" line914="        else if (voltage22 &gt; 928) { waterProofTemp = 54; }" line915="" line916="        else if (voltage22 &gt; 924) { waterProofTemp = 53; }" line917="" line918="        else if (voltage22 &gt; 921) { waterProofTemp = 52; }" line919="" line920="        else if (voltage22 &gt; 917) { waterProofTemp = 51; }" line921="" line922="        else if (voltage22 &gt; 914) { waterProofTemp = 51; }" line923="" line924="        else if (voltage22 &gt; 910) { waterProofTemp = 49; }" line925="" line926="        else if (voltage22 &gt; 906) { waterProofTemp = 48; }" line927="" line928="        else if (voltage22 &gt; 902) { waterProofTemp = 47; }" line929="" line930="        else if (voltage22 &gt; 898) { waterProofTemp = 46; }" line931="" line932="        else if (voltage22 &gt; 893) { waterProofTemp = 45; }" line933="" line934="        else if (voltage22 &gt; 889) { waterProofTemp = 44; }" line935="" line936="        else if (voltage22 &gt; 884) { waterProofTemp = 43; }" line937="" line938="        else if (voltage22 &gt; 879) { waterProofTemp = 42; }" line939="" line940="        else if (voltage22 &gt; 874) { waterProofTemp = 41; }" line941="" line942="        else if (voltage22 &gt; 869) { waterProofTemp = 40; }" line943="" line944="        else if (voltage22 &gt; 864) { waterProofTemp = 39; }" line945="" line946="        else if (voltage22 &gt; 858) { waterProofTemp = 38; }" line947="" line948="        else if (voltage22 &gt; 852) { waterProofTemp = 37; }" line949="" line950="        else if (voltage22 &gt; 846) { waterProofTemp = 36; }" line951="" line952="        else if (voltage22 &gt; 840) { waterProofTemp = 35; }" line953="" line954="        else if (voltage22 &gt; 834) { waterProofTemp = 34; }" line955="" line956="        else if (voltage22 &gt; 827) { waterProofTemp = 33; }" line957="" line958="        else if (voltage22 &gt; 821) { waterProofTemp = 32; }" line959="" line960="        else if (voltage22 &gt; 814) { waterProofTemp = 31; }" line961="" line962="        else if (voltage22 &gt; 806) { waterProofTemp = 30; }" line963="" line964="        else if (voltage22 &gt; 799) { waterProofTemp = 29; }" line965="" line966="        else if (voltage22 &gt; 791) { waterProofTemp = 28; }" line967="" line968="        else if (voltage22 &gt; 784) { waterProofTemp = 27; }" line969="" line970="        else if (voltage22 &gt; 776) { waterProofTemp = 26; }" line971="" line972="        else if (voltage22 &gt; 767) { waterProofTemp = 25; }" line973="" line974="        else if (voltage22 &gt; 759) { waterProofTemp = 24; }" line975="" line976="        else if (voltage22 &gt; 750) { waterProofTemp = 23; }" line977="" line978="        else if (voltage22 &gt; 741) { waterProofTemp = 22; }" line979="" line980="        else if (voltage22 &gt; 732) { waterProofTemp = 21; }" line981="" line982="        else if (voltage22 &gt; 713) { waterProofTemp = 19; }" line983="" line984="        else if (voltage22 &gt; 703) { waterProofTemp = 18; }" line985="" line986="        else if (voltage22 &gt; 692) { waterProofTemp = 17; }" line987="" line988="        else if (voltage22 &gt; 682) { waterProofTemp = 16; }" line989="" line990="        else if (voltage22 &gt; 671) { waterProofTemp = 15; }" line991="" line992="        else if (voltage22 &gt; 661) { waterProofTemp = 14; }" line993="" line994="        else if (voltage22 &gt; 650) { waterProofTemp = 13; }" line995="" line996="        else if (voltage22 &gt; 638) { waterProofTemp = 12; }" line997="" line998="        else if (voltage22 &gt; 627) { waterProofTemp = 11; }" line999="" line1000="        else if (voltage22 &gt; 615) { waterProofTemp = 10; }" line1001="" line1002="        else if (voltage22 &gt; 604) { waterProofTemp = 9; }" line1003="" line1004="        else if (voltage22 &gt; 592) { waterProofTemp = 8; }" line1005="" line1006="        else if (voltage22 &gt; 579) { waterProofTemp = 7; }" line1007="" line1008="        else if (voltage22 &gt; 567) { waterProofTemp = 6; }" line1009="" line1010="        else if (voltage22 &gt; 555) { waterProofTemp = 5; }" line1011="" line1012="        else if (voltage22 &gt; 542) { waterProofTemp = 4; }" line1013="" line1014="        else if (voltage22 &gt; 530) { waterProofTemp = 3; }" line1015="" line1016="        else if (voltage22 &gt; 517) { waterProofTemp = 2; }" line1017="" line1018="        else if (voltage22 &gt; 504) { waterProofTemp = 1; }" line1019="" line1020="        else { waterProofTemp = 0; }" line1021="" line1022="        return waterProofTemp;" line1023="" line1024="    }" line1025="" line1026="" line1027="" line1028="    /**" line1029="" line1030="    * get Ultrasonic distance" line1031="" line1032="    */" line1033="" line1034="    //% blockId=sonarbit" line1035="" line1036="    //% weight=29" line1037="" line1038="" line1039="" line1040="    //% subcategory=Sensor" line1041="" line1042="    //% blockId=sonar_ping block=&quot;Ultrasonic Sensor %ultpins units %unit&quot;" line1043="" line1044="    //% ultpins.fieldEditor=&quot;gridpicker&quot;" line1045="" line1046="    //% ultpins.fieldOptions.width=220" line1047="" line1048="    //% ultpins.fieldOptions.columns=2" line1049="" line1050="    export function ping(ultpins: Ultrasonic_pin, unit: PingUnit, maxCmDistance = 500): number {" line1051="" line1052="        // send pulse" line1053="" line1054="" line1055="" line1056="        let d" line1057="" line1058="        let distance" line1059="" line1060="        let echopin" line1061="" line1062="        let trigpin" line1063="" line1064="        if (ultpins == 13) {" line1065="" line1066="            trigpin = DigitalPin.P0;" line1067="" line1068="            echopin = DigitalPin.P13;" line1069="" line1070="        }" line1071="" line1072="        if (ultpins == 114) {" line1073="" line1074="            trigpin = DigitalPin.P1;" line1075="" line1076="            echopin = DigitalPin.P14;" line1077="" line1078="        }" line1079="" line1080="        if (ultpins == 215) {" line1081="" line1082="            trigpin = DigitalPin.P2;" line1083="" line1084="            echopin = DigitalPin.P15;" line1085="" line1086="        }" line1087="" line1088="        if (ultpins == 87) {" line1089="" line1090="            trigpin = DigitalPin.P8;" line1091="" line1092="            echopin = DigitalPin.P7;" line1093="" line1094="        }" line1095="" line1096="        if (ultpins == 129) {" line1097="" line1098="            trigpin = DigitalPin.P12;" line1099="" line1100="            echopin = DigitalPin.P9;" line1101="" line1102="        }" line1103="" line1104="        if (ultpins == 1610) {" line1105="" line1106="            trigpin = DigitalPin.P16;" line1107="" line1108="            echopin = DigitalPin.P10;" line1109="" line1110="        }" line1111="" line1112="        pins.setPull(trigpin, PinPullMode.PullNone);" line1113="" line1114="        pins.digitalWritePin(trigpin, 0);" line1115="" line1116="        control.waitMicros(2);" line1117="" line1118="        pins.digitalWritePin(trigpin, 1);" line1119="" line1120="        control.waitMicros(10);" line1121="" line1122="        pins.digitalWritePin(trigpin, 0);" line1123="" line1124="" line1125="" line1126="        // read pulse" line1127="" line1128="        d = pins.pulseIn(echopin, PulseValue.High, maxCmDistance * 50);" line1129="" line1130="        distance = d * 34 / 2 / 1000 * 3 / 2;" line1131="" line1132="        switch (unit) {" line1133="" line1134="            case PingUnit.Centimeters: return Math.round(distance);" line1135="" line1136="            case PingUnit.Inches: return Math.round(distance / 30.48);" line1137="" line1138="            default: return Math.round(d);" line1139="" line1140="        }" line1141="" line1142="    }" line1143="" line1144="" line1145="" line1146="    //////人体红外/////" line1147="" line1148="    //% weight=27" line1149="" line1150="    //% pirpin.fieldEditor=&quot;gridpicker&quot;" line1151="" line1152="    //% pirpin.fieldOptions.width=220" line1153="" line1154="    //% pirpin.fieldOptions.columns=2" line1155="" line1156="    //% blockId=&quot;PIR&quot; block=&quot;PIR Sensor %pirpin detects motion&quot;" line1157="" line1158="    //% subcategory=Sensor " line1159="" line1160="    export function pir(pirpin: Write_pin): number {" line1161="" line1162="        let pin48" line1163="        let rt" line1164="" line1165="        if (pirpin == 1) {" line1166="" line1167="" line1168="" line1169="            pin48 = DigitalPin.P0;" line1170="" line1171="        }" line1172="" line1173="        if (pirpin == 2) {" line1174="" line1175="            pin48 = DigitalPin.P16;" line1176="" line1177="        }" line1178="" line1179="        if (pirpin == 3) {" line1180="" line1181="            pin48 = DigitalPin.P1;" line1182="" line1183="        }" line1184="" line1185="        if (pirpin == 4) {" line1186="" line1187="" line1188="" line1189="            pin48 = DigitalPin.P12;" line1190="" line1191="        }" line1192="" line1193="        if (pirpin == 5) {" line1194="" line1195="            pin48 = DigitalPin.P2;" line1196="" line1197="        }" line1198="" line1199="        if (pirpin == 6) {" line1200="" line1201="            pin48 = DigitalPin.P8;" line1202="" line1203="        }" line1204="" line1205="" line1206="" line1207="        if (pins.digitalReadPin(pin48) == 1) {" line1208="" line1209="            rt = 0" line1210="" line1211="        }" line1212="" line1213="        else {" line1214="" line1215="            rt = 1" line1216="" line1217="        }" line1218="        return rt" line1219="" line1220="    }" line1221="" line1222="" line1223="    /////////摇杆////////////////////" line1224="" line1225="    export enum rocket {" line1226="        //% block=&quot;X&quot;" line1227="" line1228="        x = 1," line1229="" line1230="        //% block=&quot;Y&quot;" line1231="" line1232="        y = 2" line1233="    }" line1234="    export enum rock {" line1235="        //% block=&quot;up&quot;" line1236="" line1237="        orient1 = 2," line1238="" line1239="        //% block=&quot;down&quot;" line1240="" line1241="        orient2 = 1," line1242="" line1243="        //% block=&quot;left&quot;" line1244="" line1245="        orient3 = 4," line1246="" line1247="        //% block=&quot;right&quot;" line1248="" line1249="        orient4 = 3" line1250="    }" line1251="" line1252="    //% weight=27" line1253="" line1254="    //% direction.fieldEditor=&quot;gridpicker&quot;" line1255="" line1256="    //% direction.fieldOptions.width=220" line1257="" line1258="    //% direction.fieldOptions.columns=2" line1259="" line1260="    //% blockId=&quot;ROCKET&quot; block=&quot;Joystick %direction moved&quot;" line1261="" line1262="    //% subcategory=Sensor " line1263="" line1264="    export function rocker(direction: rocket): number {" line1265="" line1266="        let GetBuff = pins.createBuffer(3)" line1267="" line1268="        GetBuff = pins.i2cReadBuffer(97, 3)" line1269="" line1270="        let re = GetBuff.getNumber(NumberFormat.Int8BE, direction)" line1271="        if (direction == 2) {" line1272="            return -re" line1273="        } else {" line1274="            return re" line1275="        }" line1276="        // re = -re" line1277="" line1278="" line1279="    }" line1280="    //% weight=27" line1281="" line1282="    //% direction.fieldEditor=&quot;gridpicker&quot;" line1283="" line1284="    //% direction.fieldOptions.width=220" line1285="" line1286="    //% direction.fieldOptions.columns=2" line1287="" line1288="    //% blockId=&quot;ROCKETORI&quot; block=&quot;Joystick detected %orientation &quot;" line1289="" line1290="    //% subcategory=Sensor " line1291="" line1292="    export function rockerori(orientation: rock): boolean {" line1293="" line1294="        let GetBuff2 = pins.createBuffer(3)" line1295="" line1296="        GetBuff2 = pins.i2cReadBuffer(97, 3)" line1297="        let ud = GetBuff2.getNumber(NumberFormat.Int8BE, 2)" line1298="        let lr = GetBuff2.getNumber(NumberFormat.Int8BE, 1)" line1299="        let flag" line1300="        if (orientation == 1) {" line1301="            if (ud &gt; 50)" line1302="                flag = true" line1303="            else" line1304="                flag = false" line1305="        }" line1306="        if (orientation == 2) {" line1307="            if (ud &lt; -50)" line1308="                flag = true" line1309="            else" line1310="                flag = false" line1311="        }" line1312="        if (orientation == 4) {" line1313="            if (lr &lt; -50)" line1314="                flag = true" line1315="            else" line1316="                flag = false" line1317="        }" line1318="        if (orientation == 3) {" line1319="            if (lr &gt; 50)" line1320="                flag = true" line1321="            else" line1322="                flag = false" line1323="        }" line1324="        return flag" line1325="" line1326="    }" line1327="" line1328="" line1329="" line1330="    ////////////////执行器/////////////////////////////////////" line1331="" line1332="    export enum enPos {" line1333="" line1334="        //% blockId=&quot;forward&quot; block=&quot;forward&quot;" line1335="" line1336="        forward = 1," line1337="" line1338="        //% blockId=&quot;stop&quot; block=&quot;back&quot;" line1339="" line1340="        stop = 2" line1341="" line1342="    }" line1343="" line1344="    export enum enMotorcolor {" line1345="        //% block=&quot;red&quot;" line1346="" line1347="        red = 81," line1348="" line1349="        //% block=&quot;green&quot;" line1350="" line1351="        blue = 82," line1352="" line1353="        //% block=&quot;blue&quot;" line1354="" line1355="        green = 83," line1356="" line1357="        //% block=&quot;yellow&quot;" line1358="" line1359="        yellow = 84" line1360="" line1361="    }" line1362="" line1363="    export enum enServo {" line1364="        S1 = 0," line1365="        S2," line1366="        S3," line1367="        S4" line1368="    }" line1369="" line1370="" line1371="" line1372="    export enum enMotors {" line1373="" line1374="" line1375="" line1376="        M2 = 10," line1377="" line1378="        M3 = 12," line1379="" line1380="        M1 = 8," line1381="" line1382="        M4 = 14" line1383="" line1384="    }" line1385="" line1386="" line1387="    const PCA9685_ADD = 0x40" line1388="" line1389="    const MODE1 = 0x00" line1390="" line1391="    const SUBADR1 = 0x02" line1392="" line1393="    const SUBADR2 = 0x03" line1394="" line1395="    const SUBADR3 = 0x04" line1396="" line1397="    const PRESCALE = 0xFE" line1398="" line1399="    const LED0_ON_L = 0x06" line1400="" line1401="    const LED0_ON_H = 0x07" line1402="" line1403="    const LED0_OFF_L = 0x08" line1404="" line1405="    const LED0_OFF_H = 0x09" line1406="" line1407="    const ALL_LED_ON_L = 0xFA" line1408="" line1409="    const ALL_LED_ON_H = 0xFB" line1410="" line1411="    const ALL_LED_OFF_L = 0xFC" line1412="" line1413="    const ALL_LED_OFF_H = 0xFD" line1414="" line1415="" line1416="" line1417="    const STP_CHA_L = 2047" line1418="" line1419="    const STP_CHA_H = 4095" line1420="" line1421="" line1422="" line1423="    const STP_CHB_L = 1" line1424="" line1425="    const STP_CHB_H = 2047" line1426="" line1427="" line1428="" line1429="    const STP_CHC_L = 1023" line1430="" line1431="    const STP_CHC_H = 3071" line1432="" line1433="" line1434="" line1435="    const STP_CHD_L = 3071" line1436="" line1437="    const STP_CHD_H = 1023" line1438="" line1439="" line1440="" line1441="    let initialized = false" line1442="" line1443="    let caraddress1 = 81" line1444="    let caraddress2 = 82" line1445="" line1446="" line1447="" line1448="    function i2cwrite(addr: number, reg: number, value: number) {" line1449="" line1450="        let buf6 = pins.createBuffer(2)" line1451="" line1452="        buf6[0] = reg" line1453="" line1454="        buf6[1] = value" line1455="" line1456="        pins.i2cWriteBuffer(addr, buf6)" line1457="" line1458="    }" line1459="" line1460="" line1461="" line1462="    function i2cread(addr: number, reg: number) {" line1463="" line1464="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line1465="" line1466="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line1467="" line1468="        return val;" line1469="" line1470="    }" line1471="" line1472="" line1473="" line1474="    function initPCA9685(): void {" line1475="        i2cwrite(PCA9685_ADD, MODE1, 0x00)" line1476="        setFreq(50);" line1477="        initialized = true" line1478="    }" line1479="" line1480="    function setFreq(freq: number): void {" line1481="        // Constrain the frequency" line1482="        let prescaleval = 25000000;" line1483="        prescaleval /= 4096;" line1484="        prescaleval /= freq;" line1485="        prescaleval -= 1;" line1486="        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);" line1487="        let oldmode = i2cread(PCA9685_ADD, MODE1);" line1488="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep" line1489="        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep" line1490="        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler" line1491="        i2cwrite(PCA9685_ADD, MODE1, oldmode);" line1492="        control.waitMicros(5000);" line1493="        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);" line1494="    }" line1495="" line1496="" line1497="    function setPwm(channel: number, on: number, off: number): void {" line1498="        if (channel &lt; 0 || channel &gt; 15)" line1499="            return;" line1500="        if (!initialized) {" line1501="            initPCA9685();" line1502="        }" line1503="        let buf22 = pins.createBuffer(5);" line1504="        buf22[0] = LED0_ON_L + 4 * channel;" line1505="        buf22[1] = on &amp; 0xff;" line1506="        buf22[2] = (on &gt;&gt; 8) &amp; 0xff;" line1507="        buf22[3] = off &amp; 0xff;" line1508="        buf22[4] = (off &gt;&gt; 8) &amp; 0xff;" line1509="        pins.i2cWriteBuffer(PCA9685_ADD, buf22);" line1510="    }" line1511="" line1512="" line1513="" line1514="" line1515="    //% blockId=SuperBit_MotorRun " line1516="" line1517="    //% weight=27" line1518="" line1519="    //% index.fieldEditor=&quot;gridpicker&quot;" line1520="" line1521="    //% index.fieldOptions.width=220" line1522="" line1523="    //% index.fieldOptions.columns=2" line1524="" line1525="    //% block=&quot;DC Motor|%index|speed(-255~255) %speed&quot;" line1526="" line1527="    //% speed.min=-255 speed.max=255" line1528="" line1529="    //% subcategory=Movement" line1530="" line1531="    export function MotorRun(index: enMotors, speed: number): void {" line1532="" line1533="        if (!initialized) {" line1534="" line1535="            initPCA9685()" line1536="" line1537="        }" line1538="" line1539="        speed = speed * 16; // map 255 to 4096" line1540="" line1541="        if (speed &gt;= 4096) {" line1542="" line1543="            speed = 4095" line1544="" line1545="        }" line1546="" line1547="        if (speed &lt;= -4096) {" line1548="" line1549="            speed = -4095" line1550="" line1551="        }" line1552="" line1553="" line1554="" line1555="        let a = index" line1556="" line1557="        let b = index + 1" line1558="" line1559="" line1560="" line1561="        if (a &gt; 10) {" line1562="" line1563="            if (speed &gt;= 0) {" line1564="" line1565="                setPwm(a, 0, speed)" line1566="" line1567="                setPwm(b, 0, 0)" line1568="" line1569="            } else {" line1570="" line1571="                setPwm(a, 0, 0)" line1572="" line1573="                setPwm(b, 0, -speed)" line1574="" line1575="            }" line1576="" line1577="        }" line1578="" line1579="        else {" line1580="" line1581="            if (speed &gt;= 0) {" line1582="" line1583="                setPwm(b, 0, speed)" line1584="" line1585="                setPwm(a, 0, 0)" line1586="" line1587="            } else {" line1588="" line1589="                setPwm(b, 0, 0)" line1590="" line1591="                setPwm(a, 0, -speed)" line1592="" line1593="            }" line1594="" line1595="        }" line1596="" line1597="    }" line1598="    //% blockId=SuperBit_runMotor block=&quot;|%motoraddress|Motor rotate at|%speed|&quot;" line1599="" line1600="    //% speed.min=-100 speed.max=100" line1601="" line1602="    //% parts=&quot;SuperBit_runMotor&quot; subcategory=Movement group=&quot;Servo Motor&quot;" line1603="" line1604="    export function runMotor(motoraddress: enMotorcolor, speed: number): void {" line1605="        speed = speed / 2" line1606="" line1607="        let speed_Buff" line1608="" line1609="        if (speed &lt; 0) {" line1610="" line1611="            speed = -speed" line1612="" line1613="            speed_Buff = (~speed) + 1" line1614="" line1615="            speed_Buff = speed_Buff | 0x80" line1616="" line1617="        }" line1618="" line1619="        else {" line1620="" line1621="            speed_Buff = speed" line1622="" line1623="        }" line1624="" line1625="        let SetBuff = pins.createBuffer(4)" line1626="" line1627="        SetBuff.setNumber(NumberFormat.UInt8BE, 0, 0x11)" line1628="" line1629="        SetBuff.setNumber(NumberFormat.UInt8BE, 1, speed_Buff)" line1630="" line1631="        SetBuff.setNumber(NumberFormat.UInt8BE, 2, 0)" line1632="" line1633="        SetBuff.setNumber(NumberFormat.UInt8BE, 3, 0)" line1634="" line1635="        pins.i2cWriteBuffer(motoraddress, SetBuff)" line1636="" line1637="" line1638="    }" line1639="    //% blockId=&quot;writemotorlocation&quot; block=&quot;|%motoraddress|Motor is turned at|%speed|to|%location|degrees&quot;" line1640="" line1641="    //% speed.min=0 speed.max=100" line1642="" line1643="    //% location.min=-360 location.max=360" line1644="" line1645="    //% parts=&quot;writemotorlocation&quot; subcategory=Movement group=&quot;Servo Motor&quot;" line1646="" line1647="    export function Writemotorlocation(motoraddress: enMotorcolor, speed: number, location: number): void {" line1648="        if (speed == 0) {" line1649="            return" line1650="        }" line1651="" line1652="        speed = speed / 2" line1653="        let speed_Buff2" line1654="" line1655="        if (speed &lt; 0) {" line1656="            speed = -speed" line1657="            speed_Buff2 = (~speed) + 1" line1658="            speed_Buff2 = speed_Buff2 | 0x80" line1659="        }" line1660="        else {" line1661="            speed_Buff2 = speed" line1662="        }" line1663="" line1664="        let location_Buff2" line1665="" line1666="        if (location &lt; 0) {" line1667="            location = -location" line1668="            location_Buff2 = (~location) + 1" line1669="            location_Buff2 = location_Buff2 | 0x8000" line1670="        }" line1671="        else {" line1672="            location_Buff2 = location" line1673="        }" line1674="" line1675="        let GetBuff3 = pins.createBuffer(6)" line1676="        GetBuff3 = pins.i2cReadBuffer(motoraddress, 6)" line1677="" line1678="        if (((location - 5) &lt;= getMotorLocation(GetBuff3)) &amp;&amp; (getMotorLocation(GetBuff3) &lt;= (location + 5))) {" line1679="            return;" line1680="        }" line1681="        let SetBuff2 = pins.createBuffer(4)" line1682="" line1683="        SetBuff2.setNumber(NumberFormat.UInt8BE, 0, 0x3)" line1684="        SetBuff2.setNumber(NumberFormat.UInt8BE, 1, speed_Buff2)" line1685="        SetBuff2.setNumber(NumberFormat.UInt8BE, 2, location_Buff2 &gt;&gt; 8)" line1686="        SetBuff2.setNumber(NumberFormat.UInt8BE, 3, location_Buff2)" line1687="" line1688="" line1689="        pins.i2cWriteBuffer(motoraddress, SetBuff2)" line1690="" line1691="        let flag2 = GetBuff3.getNumber(NumberFormat.Int8BE, 5);" line1692="        while (true) {//如果没有在运行，则一直读取" line1693="            GetBuff3 = pins.i2cReadBuffer(motoraddress, 6)" line1694="            flag2 = GetBuff3.getNumber(NumberFormat.Int8BE, 5)" line1695="            if ((flag2 == 3)) break;//当有一个Servo Motor转动起来的时候，就退出死循环" line1696="        }" line1697="        while (true) {//如果没有在运行，则一直读取" line1698="            GetBuff3 = pins.i2cReadBuffer(motoraddress, 6)" line1699="            flag2 = GetBuff3.getNumber(NumberFormat.Int8BE, 5)" line1700="            if ((flag2 == 11) || (flag2 == 10)) break;//当结束任务的时候，就退出死循环" line1701="        }" line1702="    }" line1703="" line1704="    //% blockId=&quot;writemotorrelativelocation&quot; block=&quot;|%motoraddress|Motor rotate at|%speed|in|%location|degrees&quot;" line1705="" line1706="    //% speed.min=-100 speed.max=100" line1707="    //% location.min=0 " line1708="    //% parts=&quot;writemotorrelativelocation&quot; subcategory=Movement group=&quot;Servo Motor&quot;" line1709="" line1710="    export function Writemotorrelativelocation(motoraddress: enMotorcolor, speed: number, location: number): void {" line1711="        if (((location &lt;= 5) &amp;&amp; (location &gt;= 0)) || ((location &gt;= -5) &amp;&amp; (location &lt;= 0))) {" line1712="            return;" line1713="        }" line1714="        speed = speed / 2" line1715="" line1716="        let location_Buff22" line1717="" line1718="        if (speed &lt; 0) {" line1719="            speed = -speed" line1720="            location_Buff22 = (~location) + 1" line1721="            location_Buff22 = location_Buff22 | 0x8000" line1722="        }" line1723="        else {" line1724="            speed = speed" line1725="            location_Buff22 = location" line1726="        }" line1727="" line1728="        let SetBuff22 = pins.createBuffer(4)" line1729="" line1730="        SetBuff22.setNumber(NumberFormat.UInt8BE, 0, 0x4)" line1731="        SetBuff22.setNumber(NumberFormat.UInt8BE, 1, speed)" line1732="        SetBuff22.setNumber(NumberFormat.UInt8BE, 2, location_Buff22 &gt;&gt; 8)" line1733="        SetBuff22.setNumber(NumberFormat.UInt8BE, 3, location_Buff22)" line1734="" line1735="        let GetBuff4 = pins.createBuffer(6)" line1736="        let flag3 = 0" line1737="" line1738="        if (speed != 0) {" line1739="            pins.i2cWriteBuffer(motoraddress, SetBuff22)" line1740="        } else {" line1741="            location = 0;" line1742="        }" line1743="" line1744="" line1745="        if (location != 0) {" line1746="            while (true) {//如果没有在运行，则一直读取" line1747="                GetBuff4 = pins.i2cReadBuffer(motoraddress, 6)" line1748="                flag3 = GetBuff4.getNumber(NumberFormat.Int8BE, 5)" line1749="                if ((flag3 == 4)) break;//等待电机执行指令，跳出循环" line1750="            }" line1751="            while (true) {//如果没有在运行，则一直读取" line1752="                GetBuff4 = pins.i2cReadBuffer(motoraddress, 6)" line1753="                flag3 = GetBuff4.getNumber(NumberFormat.Int8BE, 5)" line1754="                if ((flag3 == 11) || (flag3 == 10)) break;//等待电机执行完指令或堵转时，跳出循环" line1755="            }" line1756="        }" line1757="" line1758="" line1759="    }" line1760="    //% blockId=&quot;writemotorrelativetime&quot; block=&quot;|%motoraddress|Motor rotate at|%speed|in|%time|seconds&quot;" line1761="" line1762="    //% speed.min=-100 speed.max=100" line1763="" line1764="    //% parts=&quot;writemotorrelativetime&quot; subcategory=Movement group=&quot;Servo Motor&quot;" line1765="" line1766="    export function Writemotorrelativetime(motoraddress: enMotorcolor, speed: number, time: number): void {" line1767="" line1768="        speed = speed / 2" line1769="" line1770="        if (time &gt; 0 &amp;&amp; time &lt; 0.1) {" line1771="            time = 0.1;" line1772="        }" line1773="        time = time * 10" line1774="" line1775="        let speed_Buff3" line1776="" line1777="        if (speed &lt; 0) {" line1778="            speed = -speed" line1779="            speed_Buff3 = (~speed) + 1" line1780="            speed_Buff3 = speed_Buff3 | 0x80" line1781="        }" line1782="        else {" line1783="            speed_Buff3 = speed" line1784="        }" line1785="" line1786="        let SetBuff222 = pins.createBuffer(4)" line1787="" line1788="        SetBuff222.setNumber(NumberFormat.UInt8BE, 0, 0x12)" line1789="        SetBuff222.setNumber(NumberFormat.UInt8BE, 1, speed_Buff3)" line1790="        SetBuff222.setNumber(NumberFormat.UInt8BE, 2, time &gt;&gt; 8)" line1791="        SetBuff222.setNumber(NumberFormat.UInt8BE, 3, time)" line1792="" line1793="        let flag4 = 0" line1794="        pins.i2cWriteBuffer(motoraddress, SetBuff222)" line1795="" line1796="        if (time != 0) {" line1797="            if (speed &lt;= 0) {" line1798="                let waitFalg = (control.millis() + (time * 100));" line1799="                while (control.millis() &lt;= waitFalg) { }" line1800="" line1801="            } else {" line1802="                let GetBuff5 = pins.createBuffer(6)" line1803="                while (true) {//如果没有在运行，则一直读取" line1804="                    GetBuff5 = pins.i2cReadBuffer(motoraddress, 6)" line1805="                    flag4 = GetBuff5.getNumber(NumberFormat.Int8BE, 5)" line1806="                    // serial.writeLine(&quot;read1:[&quot; + GetBuff.getNumber(NumberFormat.Int8BE, 0) + &quot;,&quot; + GetBuff.getNumber(NumberFormat.Int8BE, 1) + &quot;,&quot; + GetBuff.getNumber(NumberFormat.Int8BE, 2) + &quot;,&quot; + GetBuff.getNumber(NumberFormat.Int8BE, 3) + &quot;,&quot; + GetBuff.getNumber(NumberFormat.Int8BE, 4) + &quot;,&quot; + GetBuff.getNumber(NumberFormat.Int8BE, 5) + &quot;,&quot; + GetBuff.getNumber(NumberFormat.Int8BE, 6) + &quot;]&quot;);" line1807="                    if ((flag4 == 0x7)) break;//等待电机执行指令，跳出循环" line1808="                }" line1809="                while (true) {//如果没有在运行，则一直读取" line1810="                    GetBuff5 = pins.i2cReadBuffer(motoraddress, 6)" line1811="                    flag4 = GetBuff5.getNumber(NumberFormat.Int8BE, 5)" line1812="                    // serial.writeLine(&quot;read2:&quot; + flag);" line1813="                    if ((flag4 == 11)) break;//等待电机执行完指令或堵转时，跳出循环" line1814="                }" line1815="            }" line1816="        }" line1817="    }" line1818="" line1819="    //% blockId=SuperBit_runDMotor block=&quot;Dual motors rotate at|%speed1| |%speed2|&quot;" line1820="" line1821="    //% speed1.min=-100 speed1.max=100" line1822="" line1823="    //% speed2.min=-100 speed2.max=100" line1824="" line1825="    //% parts=&quot;SuperBit_runDMotor&quot; subcategory=Movement group=&quot;Servo Motor&quot;" line1826="" line1827="    export function runDMotor(speed1: number, speed2: number): void {" line1828="" line1829="        speed1 = -speed1 / 2" line1830="        speed2 = speed2 / 2" line1831="" line1832="        let speed_Buff1" line1833="        if (speed1 &lt; 0) {" line1834="            speed1 = -speed1" line1835="            speed_Buff1 = (~speed1) + 1" line1836="            speed_Buff1 = speed_Buff1 | 0x80" line1837="        }" line1838="        else {" line1839="            speed_Buff1 = speed1" line1840="        }" line1841="" line1842="        let speed_Buff23" line1843="        if (speed2 &lt; 0) {" line1844="            speed2 = -speed2" line1845="            speed_Buff23 = (~speed2) + 1" line1846="            speed_Buff23 = speed_Buff23 | 0x80" line1847="        }" line1848="        else {" line1849="            speed_Buff23 = speed2" line1850="        }" line1851="" line1852="        let SetBuff3 = pins.createBuffer(4)" line1853="        let SetBuffc = pins.createBuffer(4)" line1854="" line1855="" line1856="        SetBuff3.setNumber(NumberFormat.UInt8BE, 0, 0x11)" line1857="        SetBuff3.setNumber(NumberFormat.UInt8BE, 1, speed_Buff1)" line1858="        SetBuff3.setNumber(NumberFormat.UInt8BE, 2, 0)" line1859="        SetBuff3.setNumber(NumberFormat.UInt8BE, 3, 0)" line1860="" line1861="        SetBuffc.setNumber(NumberFormat.UInt8BE, 0, 0x11)" line1862="        SetBuffc.setNumber(NumberFormat.UInt8BE, 1, speed_Buff23)" line1863="        SetBuffc.setNumber(NumberFormat.UInt8BE, 2, 0)" line1864="        SetBuffc.setNumber(NumberFormat.UInt8BE, 3, 0)" line1865="" line1866="        pins.i2cWriteBuffer(caraddress1, SetBuff3)" line1867="        pins.i2cWriteBuffer(caraddress2, SetBuffc)" line1868="" line1869="    }" line1870="    //% blockId=&quot;writeDmotorlocation&quot; block=&quot;Dual motors at|%speed1| |%speed2|in|%location|degrees&quot;" line1871="" line1872="    //% speed1.min=-100 speed1.max=100" line1873="" line1874="    //% speed2.min=-100 speed2.max=100" line1875="    //% location.min=0 " line1876="    //% parts=&quot;writeDmotorlocation&quot; subcategory=Movement group=&quot;Servo Motor&quot;" line1877="" line1878="    export function WriteDmotorlocation(speed1: number, speed2: number, location: number): void {" line1879="        if (((location &lt;= 5) &amp;&amp; (location &gt;= 0)) || ((location &gt;= -5) &amp;&amp; (location &lt;= 0))) {" line1880="            return;" line1881="        }" line1882="        speed1 = -speed1 / 2" line1883="        speed2 = speed2 / 2" line1884="" line1885="        let location1" line1886="        let location_Buff1" line1887="" line1888="        let location2" line1889="        let location_Buff23" line1890="" line1891="        location2 = ~location" line1892="        location1 = ~location" line1893="" line1894="        if (speed2 &lt; 0) {" line1895="            speed2 = -speed2" line1896="            location_Buff23 = location2 + 1" line1897="        }" line1898="        else {" line1899="            location_Buff23 = location" line1900="        }" line1901="" line1902="        if (speed1 &lt; 0) {" line1903="            speed1 = -speed1" line1904="            location_Buff1 = location1 + 1" line1905="        }" line1906="        else {" line1907="            location_Buff1 = location" line1908="        }" line1909="" line1910="        if (speed1 == 0) {" line1911="            location_Buff1 = 0" line1912="        }" line1913="" line1914="        if (speed2 == 0) {" line1915="            location_Buff23 = 0" line1916="        }" line1917="" line1918="        let SetBuff23 = pins.createBuffer(4)" line1919="        let SetBuff2c = pins.createBuffer(4)" line1920="" line1921="" line1922="        SetBuff2c.setNumber(NumberFormat.UInt8BE, 0, 0x4)" line1923="        SetBuff2c.setNumber(NumberFormat.UInt8BE, 1, speed2)" line1924="        SetBuff2c.setNumber(NumberFormat.UInt8BE, 2, location_Buff23 &gt;&gt; 8)" line1925="        SetBuff2c.setNumber(NumberFormat.UInt8BE, 3, location_Buff23)" line1926="" line1927="" line1928="        SetBuff23.setNumber(NumberFormat.UInt8BE, 0, 0x4)" line1929="        SetBuff23.setNumber(NumberFormat.UInt8BE, 1, speed1)" line1930="        SetBuff23.setNumber(NumberFormat.UInt8BE, 2, location_Buff1 &gt;&gt; 8)" line1931="        SetBuff23.setNumber(NumberFormat.UInt8BE, 3, location_Buff1)" line1932="" line1933="        if ((location != 0) &amp;&amp; ((speed1 != 0) || (speed2 != 0))) {" line1934="" line1935="" line1936="            let GetBuff6 = pins.createBuffer(7)" line1937="            let GetBuff1 = pins.createBuffer(7)" line1938="" line1939="            //发送控制参数并获取运动状态" line1940="            pins.i2cWriteBuffer(caraddress1, SetBuff23)" line1941="            GetBuff1 = pins.i2cReadBuffer(caraddress1, 6)" line1942="            pins.i2cWriteBuffer(caraddress2, SetBuff2c)" line1943="            GetBuff6 = pins.i2cReadBuffer(caraddress2, 6)" line1944="" line1945="            let flag5 = GetBuff6.getNumber(NumberFormat.Int8BE, 5)//获取了第6位" line1946="            let flag1 = GetBuff1.getNumber(NumberFormat.Int8BE, 5)//获取了第6位" line1947="            //4为正在运行" line1948="            while (true) {//如果没有在运行，则一直读取" line1949="" line1950="                GetBuff6 = pins.i2cReadBuffer(caraddress2, 6)" line1951="                GetBuff1 = pins.i2cReadBuffer(caraddress1, 6)" line1952="                flag5 = GetBuff6.getNumber(NumberFormat.Int8BE, 5)" line1953="                flag1 = GetBuff1.getNumber(NumberFormat.Int8BE, 5)" line1954="                if ((flag1 == 4) || (flag5 == 4)) break;//当有一个电机转动起来的时候，就退出死循环" line1955="" line1956="" line1957="            }" line1958="            //11为运行结束" line1959="            while (true) {" line1960="                GetBuff6 = pins.i2cReadBuffer(caraddress2, 6)" line1961="                GetBuff1 = pins.i2cReadBuffer(caraddress1, 6)" line1962="                flag5 = GetBuff6.getNumber(NumberFormat.Int8BE, 5)" line1963="                flag1 = GetBuff1.getNumber(NumberFormat.Int8BE, 5)" line1964="                // 11：结束运动，10：堵转停止" line1965="                if (((flag1 == 11) || (flag1 == 10)) &amp;&amp; ((flag5 == 11) || (flag5 == 10))) break;//当有两个电机都执行完毕的时候，就退出死循环" line1966="            }" line1967="        }" line1968="    }" line1969="" line1970="    //% blockId=&quot;writeDmotortime&quot; block=&quot;Dual motors rotate at |%speed1| |%speed2|in|%time|seconds&quot;" line1971="" line1972="    //% speed1.min=-100 speed1.max=100" line1973="" line1974="    //% speed2.min=-100 speed2.max=100" line1975="    //% time.min=0 " line1976="    //% parts=&quot;writeDmotortime&quot; subcategory=Movement group=&quot;Servo Motor&quot;" line1977="" line1978="    export function writeDmotortime(speed1: number, speed2: number, time: number): void {" line1979="" line1980="        speed1 = -speed1 / 2" line1981="        speed2 = speed2 / 2" line1982="        // serial.writeLine(&quot;read1:&quot; + time + &quot;,&quot; + (time &gt; 0 &amp;&amp; time &lt; 0.1));" line1983="        if (time &gt; 0 &amp;&amp; time &lt; 0.1) {" line1984="            time = 0.1;" line1985="        }" line1986="        time = time * 10" line1987="        let speed_Buff32" line1988="        let speed_Buff4" line1989="" line1990="        if (speed1 &lt; 0) {" line1991="            speed1 = -speed1" line1992="            speed_Buff32 = (~speed1) + 1" line1993="            speed_Buff32 = speed_Buff32 | 0x80" line1994="        }" line1995="        else {" line1996="            speed_Buff32 = speed1" line1997="        }" line1998="" line1999="        if (speed2 &lt; 0) {" line2000="            speed2 = -speed2" line2001="            speed_Buff4 = (~speed2) + 1" line2002="            speed_Buff4 = speed_Buff4 | 0x80" line2003="        }" line2004="        else {" line2005="            speed_Buff4 = speed2" line2006="        }" line2007="" line2008="        let SetBuff32 = pins.createBuffer(4)" line2009="        let SetBuff4 = pins.createBuffer(4)" line2010="" line2011="        SetBuff32.setNumber(NumberFormat.UInt8BE, 0, 0x12)" line2012="        SetBuff32.setNumber(NumberFormat.UInt8BE, 1, speed_Buff32)" line2013="        SetBuff32.setNumber(NumberFormat.UInt8BE, 2, time &gt;&gt; 8)" line2014="        SetBuff32.setNumber(NumberFormat.UInt8BE, 3, time)" line2015="" line2016="        SetBuff4.setNumber(NumberFormat.UInt8BE, 0, 0x12)" line2017="        SetBuff4.setNumber(NumberFormat.UInt8BE, 1, speed_Buff4)" line2018="        SetBuff4.setNumber(NumberFormat.UInt8BE, 2, time &gt;&gt; 8)" line2019="        SetBuff4.setNumber(NumberFormat.UInt8BE, 3, time)" line2020="        // serial.writeLine(&quot;read1:&quot; + SetBuff4.getNumber(NumberFormat.UInt8BE, ));" line2021="" line2022="        if (speed1 != 0) {" line2023="            pins.i2cWriteBuffer(caraddress1, SetBuff32)" line2024="        }" line2025="        if (speed2 != 0) {" line2026="            pins.i2cWriteBuffer(caraddress2, SetBuff4)" line2027="        }" line2028="" line2029="" line2030="" line2031="        if ((time !== 0) &amp;&amp; ((speed1 !== 0) || (speed2 !== 0))) {" line2032="            let GetBuff7 = pins.createBuffer(6)" line2033="            let GetBuff12 = pins.createBuffer(6)" line2034="" line2035="            GetBuff7 = pins.i2cReadBuffer(caraddress2, 6)" line2036="            GetBuff12 = pins.i2cReadBuffer(caraddress1, 6)" line2037="" line2038="            let flag6 = GetBuff7.getNumber(NumberFormat.Int8BE, 5)//获取了第6位" line2039="            let flag12 = GetBuff12.getNumber(NumberFormat.Int8BE, 5)//获取了第6位" line2040="" line2041="            while (true) {//如果没有在运行，则一直读取" line2042="" line2043="                GetBuff7 = pins.i2cReadBuffer(caraddress2, 6)" line2044="                GetBuff12 = pins.i2cReadBuffer(caraddress1, 6)" line2045="                flag6 = GetBuff7.getNumber(NumberFormat.Int8BE, 5)" line2046="                flag12 = GetBuff12.getNumber(NumberFormat.Int8BE, 5)" line2047="                // serial.writeLine(&quot;read2:[&quot; + flag1 + &quot;,&quot; + flag+&quot;]&quot;);" line2048="                if ((flag12 == 0x7) || (flag6 == 0x7)) break;//当有一个电机转动起来的时候，就退出死循环" line2049="" line2050="" line2051="            }" line2052="            //11为运行结束" line2053="            while (true) {" line2054="                GetBuff7 = pins.i2cReadBuffer(caraddress2, 6)" line2055="                GetBuff12 = pins.i2cReadBuffer(caraddress1, 6)" line2056="                flag6 = GetBuff7.getNumber(NumberFormat.Int8BE, 5)" line2057="                flag12 = GetBuff12.getNumber(NumberFormat.Int8BE, 5)" line2058="                // serial.writeLine(&quot;read3:[&quot; + flag1 + &quot;,&quot; + flag + &quot;]&quot;);" line2059="                if (((flag12 == 11)) &amp;&amp; ((flag6 == 11))) break;//当有两个电机都执行完毕的时候，就退出死循环" line2060="" line2061="            }" line2062="        }" line2063="" line2064="    }" line2065="" line2066="    //% blockId=SuperBit_DMotor block=&quot;Set left motor to|%motoraddress1|and right motor to|%motoraddress2|&quot;" line2067="" line2068="    //% parts=&quot;SuperBit_DMotor&quot; subcategory=Movement group=&quot;Servo Motor&quot;" line2069="" line2070="    export function DMotor(motoraddress1: enMotorcolor, motoraddress2: enMotorcolor): void {" line2071="        caraddress1 = motoraddress1" line2072="" line2073="        caraddress2 = motoraddress2" line2074="" line2075="    }" line2076="" line2077="" line2078="    //% blockId=SuperBit_Servo4 block=&quot;Servo| %num|angle %value&quot;" line2079="    //% num.min=1 num.max=4 value.min=0 value.max=300" line2080="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=20" line2081="    //%  subcategory=Movement" line2082="    export function Servo4(num: enServo, value: number): void {" line2083="" line2084="        // 50hz: 20,000 us" line2085="        let us = (value * 1800 * 0.6 / 180 + 600); // 0.6 ~ 2.4" line2086="        let pwm = us * 4096 / 20000;" line2087="        setPwm(num, 0, pwm);" line2088="" line2089="    }" line2090="" line2091="    //% blockId=&quot;readmotorspeed&quot; block=&quot;Read speed of the |%motoraddress|motor&quot;" line2092="" line2093="    //% parts=&quot;readmotorspeed&quot; subcategory=Movement group=&quot;Servo Motor&quot;" line2094="" line2095="    export function Readmotorspeed(motoraddress: enMotorcolor): number {" line2096="" line2097="        let GetBuff8 = pins.createBuffer(6)" line2098="        GetBuff8 = pins.i2cReadBuffer(motoraddress, 6)" line2099="        return GetBuff8.getNumber(NumberFormat.Int8BE, 0);" line2100="" line2101="    }" line2102="" line2103="    function getMotorLocation(buffer: Buffer) {" line2104="" line2105="        let location_Buff = (buffer.getNumber(NumberFormat.Int8BE, 1) &lt;&lt; 8) + buffer.getNumber(NumberFormat.Int8BE, 2)" line2106="        let This_location;" line2107="        if (location_Buff &amp; 0x0080) {" line2108="            This_location = location_Buff + 0x0100" line2109="        }" line2110="        else {" line2111="            This_location = location_Buff" line2112="        }" line2113="        return This_location;" line2114="    }" line2115="    function getMotorSpeed(buffer: Buffer) {" line2116="" line2117="        let location_Buff3 = (buffer.getNumber(NumberFormat.Int8BE, 0) &lt;&lt; 8) + buffer.getNumber(NumberFormat.Int8BE, 1)" line2118="        let This_speed;" line2119="        if (location_Buff3 &amp; 0x0080) {" line2120="            This_speed = location_Buff3 + 0x0100" line2121="        }" line2122="        else {" line2123="            This_speed = location_Buff3" line2124="        }" line2125="        return This_speed;" line2126="    }" line2127="" line2128="    //% blockId=&quot;readmotorlocation&quot; block=&quot;Read position of the |%motoraddress|motor&quot;" line2129="" line2130="    //% parts=&quot;readmotorlocation&quot; subcategory=Movement group=&quot;Servo Motor&quot;" line2131="" line2132="    export function Readmotorlocation(motoraddress: enMotorcolor): number {" line2133="" line2134="        let GetBuff22 = pins.createBuffer(6)" line2135="" line2136="        GetBuff22 = pins.i2cReadBuffer(motoraddress, 6)" line2137="        let This_location2 = getMotorLocation(GetBuff22);" line2138="        return This_location2;" line2139="" line2140="    }" line2141="    " line2142="" line2143="" line2144="" line2145="    /**" line2146="" line2147="    * toggle fans" line2148="" line2149="    */" line2150="" line2151="    //% blockId=fans block=&quot;Fan %fanpin switch $fanstate || speed %speed&quot;" line2152="" line2153="    //% fanstate.shadow=&quot;toggleOnOff&quot;" line2154="" line2155="    //% weight=24" line2156="" line2157="    //% fanpin.fieldEditor=&quot;gridpicker&quot;" line2158="" line2159="    //% fanpin.fieldOptions.width=220" line2160="" line2161="    //% fanpin.fieldOptions.columns=1" line2162="" line2163="    //% speed.min=0 speed.max=1023" line2164="" line2165="    //% expandableArgumentMode=&quot;toggle&quot;" line2166="" line2167="    //% subcategory=Movement" line2168="" line2169="    export function motorFan(fanpin: Read_pin, fanstate: boolean, speed: number = 1023): void {" line2170="" line2171="        let pin3" line2172="" line2173="" line2174="" line2175="" line2176="" line2177="        if (fanpin == 1) {" line2178="" line2179="" line2180="" line2181="            pin3 = AnalogPin.P0;" line2182="" line2183="        }" line2184="" line2185="        if (fanpin == 2) {" line2186="" line2187="            pin3 = AnalogPin.P1;" line2188="" line2189="        }" line2190="" line2191="        if (fanpin == 3) {" line2192="" line2193="            pin3 = AnalogPin.P2;" line2194="" line2195="        }" line2196="" line2197="" line2198="" line2199="        if (fanstate) {" line2200="" line2201="            pins.analogSetPeriod(pin3, 1023);" line2202="" line2203="            pins.analogWritePin(pin3, Math.map(speed, 0, 1023, 0, 1023));" line2204="" line2205="        }" line2206="" line2207="        else {" line2208="" line2209="            pins.analogWritePin(pin3, 0);" line2210="" line2211="            speed = 0;" line2212="" line2213="        }" line2214="" line2215="" line2216="" line2217="    }" line2218="" line2219="" line2220="" line2221="    //% blockId=&quot;elecmagnet&quot; block=&quot;Electromagnet %elecpin switch %magState || electromagnet %force&quot;" line2222="" line2223="    //% magState.shadow=&quot;toggleOnOff&quot;" line2224="" line2225="    //% weight=23" line2226="" line2227="    //% elecpin.fieldEditor=&quot;gridpicker&quot;" line2228="" line2229="    //% elecpin.fieldOptions.width=220" line2230="" line2231="    //% elecpin.fieldOptions.columns=2" line2232="" line2233="    //% force.min=0 force.max=1023" line2234="" line2235="    //% expandableArgumentMode=&quot;toggle&quot;" line2236="" line2237="    //% subcategory=Movement" line2238="" line2239="    export function elecmagnet(elecpin: Write_pin, magState: boolean, force: number = 1023): void {" line2240="" line2241="        let pin8" line2242="" line2243="        if (elecpin == 1) {" line2244="" line2245="" line2246="" line2247="            pin8 = AnalogPin.P0;" line2248="" line2249="        }" line2250="" line2251="        if (elecpin == 2) {" line2252="" line2253="            pin8 = AnalogPin.P16;" line2254="" line2255="        }" line2256="" line2257="        if (elecpin == 3) {" line2258="" line2259="            pin8 = AnalogPin.P1;" line2260="" line2261="        }" line2262="" line2263="        if (elecpin == 4) {" line2264="" line2265="" line2266="" line2267="            pin8 = AnalogPin.P12;" line2268="" line2269="        }" line2270="" line2271="        if (elecpin == 5) {" line2272="" line2273="            pin8 = AnalogPin.P2;" line2274="" line2275="        }" line2276="" line2277="        if (elecpin == 6) {" line2278="" line2279="            pin8 = AnalogPin.P8;" line2280="" line2281="        }" line2282="" line2283="" line2284="" line2285="        if (magState == true) {" line2286="" line2287="            pins.analogSetPeriod(pin8, 1023)" line2288="" line2289="            pins.analogWritePin(pin8, Math.map(force, 0, 1023, 0, 1023))" line2290="" line2291="        }" line2292="" line2293="        else {" line2294="" line2295="            pins.analogWritePin(pin8, 0)" line2296="" line2297="            force = 0" line2298="" line2299="        }" line2300="" line2301="    }" line2302="" line2303="" line2304="" line2305="    ////////////////////////////////////////////" line2306="" line2307="" line2308="" line2309="    /**" line2310="  * toggle led" line2311="  */" line2312="    //% blockId=LEDR block=&quot;Red LED %pin swicth $ledstate &quot;" line2313="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line2314="    //% pin.fieldEditor=&quot;gridpicker&quot;" line2315="    //% pin.fieldOptions.width=220" line2316="    //% pin.fieldOptions.columns=2" line2317="    //% expandableArgumentMode=&quot;toggle&quot;" line2318="    //% subcategory=&quot;Audio-visual&quot; group=&quot;LED&quot;" line2319="    export function ledRBrightness(pin: Write_pin, ledstate: boolean): void {" line2320="        let myPin; // 直接将 pin 赋值给 myPin" line2321="" line2322="        switch (pin) {" line2323="            case 1:" line2324="                myPin = DigitalPin.P0;" line2325="                break;" line2326="            case 2:" line2327="                myPin = DigitalPin.P16;" line2328="                break;" line2329="            case 3:" line2330="                myPin = DigitalPin.P1;" line2331="                break;" line2332="            case 4:" line2333="                myPin = DigitalPin.P12;" line2334="                break;" line2335="            case 5:" line2336="                myPin = DigitalPin.P2;" line2337="                break;" line2338="            case 6:" line2339="                myPin = DigitalPin.P8;" line2340="                break;" line2341="        }" line2342="        if (ledstate) {" line2343="            pins.digitalWritePin(myPin, 0)" line2344="        }" line2345="        else {" line2346="            pins.digitalWritePin(myPin, 1)" line2347="        }" line2348="    }" line2349="" line2350="" line2351="    /**" line2352="   * toggle led" line2353="   */" line2354="    //% blockId=LEDG block=&quot;Green LED %pin switch $ledstate &quot;" line2355="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line2356="    //% pin.fieldEditor=&quot;gridpicker&quot;" line2357="    //% pin.fieldOptions.width=220" line2358="    //% pin.fieldOptions.columns=2" line2359="    //% expandableArgumentMode=&quot;toggle&quot;" line2360="    //% subcategory=&quot;Audio-visual&quot; group=&quot;LED&quot;" line2361="    export function ledGBrightness(pin: Write_pin, ledstate: boolean): void {" line2362="        let myPin2; // 直接将 pin 赋值给 myPin" line2363="" line2364="        switch (pin) {" line2365="            case 1:" line2366="                myPin2 = DigitalPin.P0;" line2367="                break;" line2368="            case 2:" line2369="                myPin2 = DigitalPin.P16;" line2370="                break;" line2371="            case 3:" line2372="                myPin2 = DigitalPin.P1;" line2373="                break;" line2374="            case 4:" line2375="                myPin2 = DigitalPin.P12;" line2376="                break;" line2377="            case 5:" line2378="                myPin2 = DigitalPin.P2;" line2379="                break;" line2380="            case 6:" line2381="                myPin2 = DigitalPin.P8;" line2382="                break;" line2383="        }" line2384="" line2385="        if (ledstate) {" line2386="            pins.digitalWritePin(myPin2, 0)" line2387="        }" line2388="        else {" line2389="            pins.digitalWritePin(myPin2, 1)" line2390="        }" line2391="    }" line2392="" line2393="    /**" line2394="     * toggle led" line2395="     */" line2396="    //% blockId=LEDB block=&quot;Blue LED %pin switch $ledstate &quot;" line2397="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line2398="    //% pin.fieldEditor=&quot;gridpicker&quot;" line2399="    //% pin.fieldOptions.width=220" line2400="    //% pin.fieldOptions.columns=2" line2401="    //% expandableArgumentMode=&quot;toggle&quot;" line2402="    //% subcategory=&quot;Audio-visual&quot; group=&quot;LED&quot;" line2403="    export function ledBBrightness(pin: Write_pin, ledstate: boolean): void {" line2404="        let myPin3; // 直接将 pin 赋值给 myPin" line2405="" line2406="        switch (pin) {" line2407="            case 1:" line2408="                myPin3 = DigitalPin.P0;" line2409="                break;" line2410="            case 2:" line2411="                myPin3 = DigitalPin.P16;" line2412="                break;" line2413="            case 3:" line2414="                myPin3 = DigitalPin.P1;" line2415="                break;" line2416="            case 4:" line2417="                myPin3 = DigitalPin.P12;" line2418="                break;" line2419="            case 5:" line2420="                myPin3 = DigitalPin.P2;" line2421="                break;" line2422="            case 6:" line2423="                myPin3 = DigitalPin.P8;" line2424="                break;" line2425="        }" line2426="        if (ledstate) {" line2427="            pins.digitalWritePin(myPin3, 0)" line2428="        }" line2429="        else {" line2430="            pins.digitalWritePin(myPin3, 1)" line2431="        }" line2432="    }" line2433="" line2434="    /**" line2435="    * toggle led" line2436="    */" line2437="    //% blockId=LEDY block=&quot;Yellow LED %pin swicth $ledstate &quot;" line2438="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line2439="    //% pin.fieldEditor=&quot;gridpicker&quot;" line2440="    //% pin.fieldOptions.width=220" line2441="    //% pin.fieldOptions.columns=2" line2442="    //% expandableArgumentMode=&quot;toggle&quot;" line2443="    //% subcategory=&quot;Audio-visual&quot; group=&quot;LED&quot;" line2444="    export function ledYBrightness(pin: Write_pin, ledstate: boolean): void {" line2445="        let myPin4; // 直接将 pin 赋值给 myPin" line2446="" line2447="        switch (pin) {" line2448="            case 1:" line2449="                myPin4 = DigitalPin.P0;" line2450="                break;" line2451="            case 2:" line2452="                myPin4 = DigitalPin.P16;" line2453="                break;" line2454="            case 3:" line2455="                myPin4 = DigitalPin.P1;" line2456="                break;" line2457="            case 4:" line2458="                myPin4 = DigitalPin.P12;" line2459="                break;" line2460="            case 5:" line2461="                myPin4 = DigitalPin.P2;" line2462="                break;" line2463="            case 6:" line2464="                myPin4 = DigitalPin.P8;" line2465="                break;" line2466="        }" line2467="" line2468="        if (ledstate) {" line2469="            pins.digitalWritePin(myPin4, 0)" line2470="        }" line2471="        else {" line2472="            pins.digitalWritePin(myPin4, 1)" line2473="        }" line2474="    }" line2475="" line2476="" line2477="" line2478="" line2479="" line2480="" line2481="" line2482="" line2483="" line2484="    enum LCS_Constants {" line2485="" line2486="        // Constants" line2487="" line2488="        ADDRESS = 0x29," line2489="" line2490="        ID = 0x12, // Register should be equal to 0x44 for the TCS34721 or TCS34725, or 0x4D for the TCS34723 or TCS34727." line2491="" line2492="" line2493="" line2494="        COMMAND_BIT = 0x80," line2495="" line2496="" line2497="" line2498="        ENABLE = 0x00," line2499="" line2500="        ENABLE_AIEN = 0x10, // RGBC Interrupt Enable" line2501="" line2502="        ENABLE_WEN = 0x08, // Wait enable - Writing 1 activates the wait timer" line2503="" line2504="        ENABLE_AEN = 0x02, // RGBC Enable - Writing 1 actives the ADC, 0 disables it" line2505="" line2506="        ENABLE_PON = 0x01, // Power on - Writing 1 activates the internal oscillator, 0 disables it" line2507="" line2508="        ATIME = 0x01, // Integration time" line2509="" line2510="        WTIME = 0x03, // Wait time (if ENABLE_WEN is asserted)" line2511="" line2512="        AILTL = 0x04, // Clear channel lower interrupt threshold" line2513="" line2514="        AILTH = 0x05," line2515="" line2516="        AIHTL = 0x06, // Clear channel upper interrupt threshold" line2517="" line2518="        AIHTH = 0x07," line2519="" line2520="        PERS = 0x0C, // Persistence register - basic SW filtering mechanism for interrupts" line2521="" line2522="        PERS_NONE = 0x00, // Every RGBC cycle generates an interrupt" line2523="" line2524="        PERS_1_CYCLE = 0x01, // 1 clean channel value outside threshold range generates an interrupt" line2525="" line2526="        PERS_2_CYCLE = 0x02, // 2 clean channel values outside threshold range generates an interrupt" line2527="" line2528="        PERS_3_CYCLE = 0x03, // 3 clean channel values outside threshold range generates an interrupt" line2529="" line2530="        PERS_5_CYCLE = 0x04, // 5 clean channel values outside threshold range generates an interrupt" line2531="" line2532="        PERS_10_CYCLE = 0x05, // 10 clean channel values outside threshold range generates an interrupt" line2533="" line2534="        PERS_15_CYCLE = 0x06, // 15 clean channel values outside threshold range generates an interrupt" line2535="" line2536="        PERS_20_CYCLE = 0x07, // 20 clean channel values outside threshold range generates an interrupt" line2537="" line2538="        PERS_25_CYCLE = 0x08, // 25 clean channel values outside threshold range generates an interrupt" line2539="" line2540="        PERS_30_CYCLE = 0x09, // 30 clean channel values outside threshold range generates an interrupt" line2541="" line2542="        PERS_35_CYCLE = 0x0A, // 35 clean channel values outside threshold range generates an interrupt" line2543="" line2544="        PERS_40_CYCLE = 0x0B, // 40 clean channel values outside threshold range generates an interrupt" line2545="" line2546="        PERS_45_CYCLE = 0x0C, // 45 clean channel values outside threshold range generates an interrupt" line2547="" line2548="        PERS_50_CYCLE = 0x0D, // 50 clean channel values outside threshold range generates an interrupt" line2549="" line2550="        PERS_55_CYCLE = 0x0E, // 55 clean channel values outside threshold range generates an interrupt" line2551="" line2552="        PERS_60_CYCLE = 0x0F, // 60 clean channel values outside threshold range generates an interrupt" line2553="" line2554="        CONFIG = 0x0D," line2555="" line2556="        CONFIG_WLONG = 0x02, // Choose between short and long (12x) wait times via WTIME" line2557="" line2558="        CONTROL = 0x0F, // Set the gain level for the sensor" line2559="" line2560="        STATUS = 0x13," line2561="" line2562="        STATUS_AINT = 0x10, // RGBC Clean channel interrupt" line2563="" line2564="        STATUS_AVALID = 0x01, // Indicates that the RGBC channels have completed an integration cycle" line2565="" line2566="" line2567="" line2568="        CDATAL = 0x14, // Clear channel data" line2569="" line2570="        CDATAH = 0x15," line2571="" line2572="        RDATAL = 0x16, // Red channel data" line2573="" line2574="        RDATAH = 0x17," line2575="" line2576="        GDATAL = 0x18, // Green channel data" line2577="" line2578="        GDATAH = 0x19," line2579="" line2580="        BDATAL = 0x1A, // Blue channel data" line2581="" line2582="        BDATAH = 0x1B," line2583="" line2584="" line2585="" line2586="        GAIN_1X = 0x00, //  1x gain" line2587="" line2588="        GAIN_4X = 0x01, //  4x gain" line2589="" line2590="        GAIN_16X = 0x02, // 16x gain" line2591="" line2592="        GAIN_60X = 0x03  // 60x gain" line2593="" line2594="    }" line2595="" line2596="" line2597="" line2598="    let LCS_integration_time_val = 0" line2599="" line2600="" line2601="" line2602="    // I2C functions" line2603="" line2604="" line2605="" line2606="    function I2C_WriteReg8(addr: number, reg: number, val: number) {" line2607="" line2608="        let buf32 = pins.createBuffer(2)" line2609="" line2610="        buf32.setNumber(NumberFormat.UInt8BE, 0, reg)" line2611="" line2612="        buf32.setNumber(NumberFormat.UInt8BE, 1, val)" line2613="" line2614="        pins.i2cWriteBuffer(addr, buf32)" line2615="" line2616="    }" line2617="" line2618="" line2619="" line2620="    function I2C_ReadReg8(addr: number, reg: number): number {" line2621="" line2622="        let buf42 = pins.createBuffer(1)" line2623="" line2624="        buf42.setNumber(NumberFormat.UInt8BE, 0, reg)" line2625="" line2626="        pins.i2cWriteBuffer(addr, buf42)" line2627="" line2628="        buf42 = pins.i2cReadBuffer(addr, 1)" line2629="" line2630="        return buf42.getNumber(NumberFormat.UInt8BE, 0);" line2631="" line2632="    }" line2633="" line2634="" line2635="" line2636="    function I2C_ReadReg16(addr: number, reg: number): number {" line2637="" line2638="        let buf52 = pins.createBuffer(1)" line2639="" line2640="        buf52.setNumber(NumberFormat.UInt8BE, 0, reg)" line2641="" line2642="        pins.i2cWriteBuffer(addr, buf52)" line2643="" line2644="        buf52 = pins.i2cReadBuffer(addr, 2)" line2645="" line2646="        // Little endian" line2647="" line2648="        return ((buf52.getNumber(NumberFormat.UInt8BE, 1) &lt;&lt; 8) | buf52.getNumber(NumberFormat.UInt8BE, 0));" line2649="" line2650="    }" line2651="" line2652="    function LCS_get_raw_data(delay: boolean = false): number[] {" line2653="" line2654="        if (delay) {" line2655="" line2656="            // Delay for the integration time to allow reading immediately after the previous read." line2657="" line2658="            basic.pause((256 - LCS_integration_time_val) * 2.4)" line2659="" line2660="        }" line2661="" line2662="" line2663="" line2664="        let div = (256 - LCS_integration_time_val) * 1024" line2665="" line2666="        let rgbc = [0, 0, 0, 0]" line2667="" line2668="        rgbc[0] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.RDATAL)) / div" line2669="" line2670="        rgbc[1] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.GDATAL)) / div" line2671="" line2672="        rgbc[2] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.BDATAL)) / div" line2673="" line2674="        rgbc[3] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.CDATAL)) / div" line2675="" line2676="        if (rgbc[0] &gt; 1) {" line2677="" line2678="            rgbc[0] = 1" line2679="" line2680="        }" line2681="" line2682="        if (rgbc[1] &gt; 1) {" line2683="" line2684="            rgbc[1] = 1" line2685="" line2686="        }" line2687="" line2688="        if (rgbc[2] &gt; 1) {" line2689="" line2690="            rgbc[2] = 1" line2691="" line2692="        }" line2693="" line2694="        if (rgbc[3] &gt; 1) {" line2695="" line2696="            rgbc[3] = 1" line2697="" line2698="        }" line2699="" line2700="        return rgbc" line2701="" line2702="    }" line2703="" line2704="" line2705="" line2706="    let font: number[] = [];" line2707="" line2708="    font[0] = 0x0022d422;" line2709="" line2710="    font[1] = 0x0022d422;" line2711="" line2712="    font[2] = 0x0022d422;" line2713="" line2714="    font[3] = 0x0022d422;" line2715="" line2716="    font[4] = 0x0022d422;" line2717="" line2718="    font[5] = 0x0022d422;" line2719="" line2720="    font[6] = 0x0022d422;" line2721="" line2722="    font[7] = 0x0022d422;" line2723="" line2724="    font[8] = 0x0022d422;" line2725="" line2726="    font[9] = 0x0022d422;" line2727="" line2728="    font[10] = 0x0022d422;" line2729="" line2730="    font[11] = 0x0022d422;" line2731="" line2732="    font[12] = 0x0022d422;" line2733="" line2734="    font[13] = 0x0022d422;" line2735="" line2736="    font[14] = 0x0022d422;" line2737="" line2738="    font[15] = 0x0022d422;" line2739="" line2740="    font[16] = 0x0022d422;" line2741="" line2742="    font[17] = 0x0022d422;" line2743="" line2744="    font[18] = 0x0022d422;" line2745="" line2746="    font[19] = 0x0022d422;" line2747="" line2748="    font[20] = 0x0022d422;" line2749="" line2750="    font[21] = 0x0022d422;" line2751="" line2752="    font[22] = 0x0022d422;" line2753="" line2754="    font[23] = 0x0022d422;" line2755="" line2756="    font[24] = 0x0022d422;" line2757="" line2758="    font[25] = 0x0022d422;" line2759="" line2760="    font[26] = 0x0022d422;" line2761="" line2762="    font[27] = 0x0022d422;" line2763="" line2764="    font[28] = 0x0022d422;" line2765="" line2766="    font[29] = 0x0022d422;" line2767="" line2768="    font[30] = 0x0022d422;" line2769="" line2770="    font[31] = 0x0022d422;" line2771="" line2772="    font[32] = 0x00000000;" line2773="" line2774="    font[33] = 0x000002e0;" line2775="" line2776="    font[34] = 0x00018060;" line2777="" line2778="    font[35] = 0x00afabea;" line2779="" line2780="    font[36] = 0x00aed6ea;" line2781="" line2782="    font[37] = 0x01991133;" line2783="" line2784="    font[38] = 0x010556aa;" line2785="" line2786="    font[39] = 0x00000060;" line2787="" line2788="    font[40] = 0x000045c0;" line2789="" line2790="    font[41] = 0x00003a20;" line2791="" line2792="    font[42] = 0x00051140;" line2793="" line2794="    font[43] = 0x00023880;" line2795="" line2796="    font[44] = 0x00002200;" line2797="" line2798="    font[45] = 0x00021080;" line2799="" line2800="    font[46] = 0x00000100;" line2801="" line2802="    font[47] = 0x00111110;" line2803="" line2804="    font[48] = 0x0007462e;" line2805="" line2806="    font[49] = 0x00087e40;" line2807="" line2808="    font[50] = 0x000956b9;" line2809="" line2810="    font[51] = 0x0005d629;" line2811="" line2812="    font[52] = 0x008fa54c;" line2813="" line2814="    font[53] = 0x009ad6b7;" line2815="" line2816="    font[54] = 0x008ada88;" line2817="" line2818="    font[55] = 0x00119531;" line2819="" line2820="    font[56] = 0x00aad6aa;" line2821="" line2822="    font[57] = 0x0022b6a2;" line2823="" line2824="    font[58] = 0x00000140;" line2825="" line2826="    font[59] = 0x00002a00;" line2827="" line2828="    font[60] = 0x0008a880;" line2829="" line2830="    font[61] = 0x00052940;" line2831="" line2832="    font[62] = 0x00022a20;" line2833="" line2834="    font[63] = 0x0022d422;" line2835="" line2836="    font[64] = 0x00e4d62e;" line2837="" line2838="    font[65] = 0x000f14be;" line2839="" line2840="    font[66] = 0x000556bf;" line2841="" line2842="    font[67] = 0x0008c62e;" line2843="" line2844="    font[68] = 0x0007463f;" line2845="" line2846="    font[69] = 0x0008d6bf;" line2847="" line2848="    font[70] = 0x000094bf;" line2849="" line2850="    font[71] = 0x00cac62e;" line2851="" line2852="    font[72] = 0x000f909f;" line2853="" line2854="    font[73] = 0x000047f1;" line2855="" line2856="    font[74] = 0x0017c629;" line2857="" line2858="    font[75] = 0x0008a89f;" line2859="" line2860="    font[76] = 0x0008421f;" line2861="" line2862="    font[77] = 0x01f1105f;" line2863="" line2864="    font[78] = 0x01f4105f;" line2865="" line2866="    font[79] = 0x0007462e;" line2867="" line2868="    font[80] = 0x000114bf;" line2869="" line2870="    font[81] = 0x000b6526;" line2871="" line2872="    font[82] = 0x010514bf;" line2873="" line2874="    font[83] = 0x0004d6b2;" line2875="" line2876="    font[84] = 0x0010fc21;" line2877="" line2878="    font[85] = 0x0007c20f;" line2879="" line2880="    font[86] = 0x00744107;" line2881="" line2882="    font[87] = 0x01f4111f;" line2883="" line2884="    font[88] = 0x000d909b;" line2885="" line2886="    font[89] = 0x00117041;" line2887="" line2888="    font[90] = 0x0008ceb9;" line2889="" line2890="    font[91] = 0x0008c7e0;" line2891="" line2892="    font[92] = 0x01041041;" line2893="" line2894="    font[93] = 0x000fc620;" line2895="" line2896="    font[94] = 0x00010440;" line2897="" line2898="    font[95] = 0x01084210;" line2899="" line2900="    font[96] = 0x00000820;" line2901="" line2902="    font[97] = 0x010f4a4c;" line2903="" line2904="    font[98] = 0x0004529f;" line2905="" line2906="    font[99] = 0x00094a4c;" line2907="" line2908="    font[100] = 0x000fd288;" line2909="" line2910="    font[101] = 0x000956ae;" line2911="" line2912="    font[102] = 0x000097c4;" line2913="" line2914="    font[103] = 0x0007d6a2;" line2915="" line2916="    font[104] = 0x000c109f;" line2917="" line2918="    font[105] = 0x000003a0;" line2919="" line2920="    font[106] = 0x0006c200;" line2921="" line2922="    font[107] = 0x0008289f;" line2923="" line2924="    font[108] = 0x000841e0;" line2925="" line2926="    font[109] = 0x01e1105e;" line2927="" line2928="    font[110] = 0x000e085e;" line2929="" line2930="    font[111] = 0x00064a4c;" line2931="" line2932="    font[112] = 0x0002295e;" line2933="" line2934="    font[113] = 0x000f2944;" line2935="" line2936="    font[114] = 0x0001085c;" line2937="" line2938="    font[115] = 0x00012a90;" line2939="" line2940="    font[116] = 0x010a51e0;" line2941="" line2942="    font[117] = 0x010f420e;" line2943="" line2944="    font[118] = 0x00644106;" line2945="" line2946="    font[119] = 0x01e8221e;" line2947="" line2948="    font[120] = 0x00093192;" line2949="" line2950="    font[121] = 0x00222292;" line2951="" line2952="    font[122] = 0x00095b52;" line2953="" line2954="    font[123] = 0x0008fc80;" line2955="" line2956="    font[124] = 0x000003e0;" line2957="" line2958="    font[125] = 0x000013f1;" line2959="" line2960="    font[126] = 0x00841080;" line2961="" line2962="    font[127] = 0x0022d422;" line2963="" line2964="" line2965="" line2966="    let _I2CAddr = 0;" line2967="" line2968="    let _screen = pins.createBuffer(1025);" line2969="" line2970="    let _buf2 = pins.createBuffer(2);" line2971="" line2972="    let _buf3 = pins.createBuffer(3);" line2973="" line2974="    let _buf4 = pins.createBuffer(4);" line2975="" line2976="    let _ZOOM = 1;" line2977="" line2978="" line2979="" line2980="    function cmd1(d: number) {" line2981="" line2982="        let n = d % 256;" line2983="" line2984="        pins.i2cWriteNumber(_I2CAddr, n, NumberFormat.UInt16BE);" line2985="" line2986="    }" line2987="" line2988="" line2989="" line2990="    function cmd2(d1: number, d2: number) {" line2991="" line2992="        _buf3[0] = 0;" line2993="" line2994="        _buf3[1] = d1;" line2995="" line2996="        _buf3[2] = d2;" line2997="" line2998="        pins.i2cWriteBuffer(_I2CAddr, _buf3);" line2999="" line3000="    }" line3001="" line3002="" line3003="" line3004="    function cmd3(d1: number, d2: number, d3: number) {" line3005="" line3006="        _buf4[0] = 0;" line3007="" line3008="        _buf4[1] = d1;" line3009="" line3010="        _buf4[2] = d2;" line3011="" line3012="        _buf4[3] = d3;" line3013="" line3014="        pins.i2cWriteBuffer(_I2CAddr, _buf4);" line3015="" line3016="    }" line3017="" line3018="" line3019="" line3020="    function set_pos(col: number = 0, page: number = 0) {" line3021="" line3022="        cmd1(0xb0 | page) // page number" line3023="" line3024="        let c = col * (_ZOOM + 1)" line3025="" line3026="        cmd1(0x00 | (c % 16)) // lower start column address" line3027="" line3028="        cmd1(0x10 | (c &gt;&gt; 4)) // upper start column address    " line3029="" line3030="    }" line3031="" line3032="" line3033="" line3034="    // clear bit" line3035="" line3036="    function clrbit(d: number, b: number): number {" line3037="" line3038="        if (d &amp; (1 &lt;&lt; b))" line3039="" line3040="            d -= (1 &lt;&lt; b)" line3041="" line3042="        return d" line3043="" line3044="    }" line3045="" line3046="" line3047="" line3048="" line3049="" line3050="" line3051="" line3052="" line3053="    /**" line3054="" line3055="     * A NeoPixel strip" line3056="" line3057="     */" line3058="" line3059="    export class Strip {" line3060="" line3061="        buf: Buffer;" line3062="" line3063="        pin: DigitalPin;" line3064="" line3065="        // TODO: encode as bytes instead of 32bit" line3066="" line3067="        brightness: number;" line3068="" line3069="        start: number; // start offset in LED strip" line3070="" line3071="        _length: number; // number of LEDs" line3072="" line3073="        _mode: NeoPixelMode;" line3074="" line3075="        _matrixWidth: number; // number of leds in a matrix - if any" line3076="" line3077="" line3078="" line3079="        /**" line3080="" line3081="         * Shows all LEDs to a given color (range 0-255 for r, g, b)." line3082="" line3083="         * @param rgb RGB color of the LED" line3084="" line3085="         */" line3086="" line3087="        //% blockId=&quot;neopixel_set_strip_color&quot; block=&quot;%strip|display Color %rgb=neopixel_colors&quot;" line3088="" line3089="        //% strip.defl=strip" line3090="" line3091="        //% weight=12" line3092="" line3093="        //% parts=&quot;neopixel&quot; subcategory=&quot;Audio-visual&quot; group=&quot;RGB LED Module&quot;" line3094="" line3095="        //% color=#2699BF blockGap=10" line3096="" line3097="        showColor(rgb: number) {" line3098="" line3099="            rgb = rgb &gt;&gt; 0;" line3100="" line3101="            this.setAllRGB(rgb);" line3102="" line3103="            this.show();" line3104="" line3105="        }" line3106="" line3107="" line3108="" line3109="        /**" line3110="" line3111="         * Shows a rainbow pattern on all LEDs." line3112="" line3113="         * @param startHue the start hue value for the rainbow, eg: 1" line3114="" line3115="         * @param endHue the end hue value for the rainbow, eg: 360" line3116="" line3117="         */" line3118="" line3119="        //% blockId=&quot;neopixel_set_strip_rainbow&quot; block=&quot;%strip|Display rainbow from start %startHue|to %endHue&quot;" line3120="" line3121="        //% strip.defl=strip" line3122="" line3123="        //% weight=13" line3124="" line3125="        //% parts=&quot;neopixel&quot; subcategory=&quot;Audio-visual&quot; group=&quot;RGB LED Module&quot;" line3126="" line3127="        //% color=#2699BF blockGap=10" line3128="" line3129="        showRainbow(startHue: number = 1, endHue: number = 360) {" line3130="" line3131="            if (this._length &lt;= 0) return;" line3132="" line3133="" line3134="" line3135="            startHue = startHue &gt;&gt; 0;" line3136="" line3137="            endHue = endHue &gt;&gt; 0;" line3138="" line3139="            const saturation = 100;" line3140="" line3141="            const luminance = 50;" line3142="" line3143="            const steps = this._length + 1;" line3144="" line3145="            const direction = HueInterpolationDirection.Clockwise;" line3146="" line3147="" line3148="" line3149="            //hue" line3150="" line3151="            const h1 = startHue;" line3152="" line3153="            const h2 = endHue;" line3154="" line3155="            const hDistCW = ((h2 + 360) - h1) % 360;" line3156="" line3157="            const hStepCW = Math.idiv((hDistCW * 100), steps);" line3158="" line3159="            const hDistCCW = ((h1 + 360) - h2) % 360;" line3160="" line3161="            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);" line3162="" line3163="            let hStep: number;" line3164="" line3165="            if (direction === HueInterpolationDirection.Clockwise) {" line3166="" line3167="                hStep = hStepCW;" line3168="" line3169="            } else if (direction === HueInterpolationDirection.CounterClockwise) {" line3170="" line3171="                hStep = hStepCCW;" line3172="" line3173="            } else {" line3174="" line3175="                hStep = hDistCW &lt; hDistCCW ? hStepCW : hStepCCW;" line3176="" line3177="            }" line3178="" line3179="            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation" line3180="" line3181="" line3182="" line3183="            //sat" line3184="" line3185="            const s1 = saturation;" line3186="" line3187="            const s2 = saturation;" line3188="" line3189="            const sDist = s2 - s1;" line3190="" line3191="            const sStep = Math.idiv(sDist, steps);" line3192="" line3193="            const s1_100 = s1 * 100;" line3194="" line3195="" line3196="" line3197="            //lum" line3198="" line3199="            const l1 = luminance;" line3200="" line3201="            const l2 = luminance;" line3202="" line3203="            const lDist = l2 - l1;" line3204="" line3205="            const lStep = Math.idiv(lDist, steps);" line3206="" line3207="            const l1_100 = l1 * 100" line3208="" line3209="" line3210="" line3211="            //interpolate" line3212="" line3213="            if (steps === 1) {" line3214="" line3215="                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))" line3216="" line3217="            } else {" line3218="" line3219="                this.setPixelColor(0, hsl(startHue, saturation, luminance));" line3220="" line3221="                for (let t = 1; t &lt; steps - 1; t++) {" line3222="" line3223="                    const u = Math.idiv((h1_100 + t * hStep), 100) + 360;" line3224="" line3225="                    const v = Math.idiv((s1_100 + t * sStep), 100);" line3226="" line3227="                    const w = Math.idiv((l1_100 + t * lStep), 100);" line3228="" line3229="                    this.setPixelColor(t, hsl(u, v, w));" line3230="" line3231="                }" line3232="" line3233="                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));" line3234="" line3235="            }" line3236="" line3237="            this.show();" line3238="" line3239="        }" line3240="" line3241="" line3242="" line3243="" line3244="" line3245="" line3246="        setPixelColor(pixeloffset: number, rgb: number): void {" line3247="" line3248="            this.setPixelRGB((pixeloffset - 1) &gt;&gt; 0, rgb &gt;&gt; 0);" line3249="" line3250="        }" line3251="" line3252="" line3253="" line3254="" line3255="" line3256="        show() {" line3257="" line3258="            // only supported in beta" line3259="" line3260="            // ws2812b.setBufferMode(this.pin, this._mode);" line3261="" line3262="            ws2812b.sendBuffer(this.buf, this.pin);" line3263="" line3264="        }" line3265="" line3266="" line3267="" line3268="        /**" line3269="    " line3270="         * Set the brightness of the strip. This flag only applies to future operation." line3271="    " line3272="         * @param brightness a measure of LED brightness in 0-255. eg: 255" line3273="    " line3274="         */" line3275="" line3276="        //% blockId=&quot;neopixel_set_brightness&quot; block=&quot;%strip|set brightness %brightness&quot;" line3277="" line3278="        //% strip.defl=strip" line3279="" line3280="        //% weight=17" line3281="" line3282="        //% parts=&quot;neopixel&quot; subcategory=&quot;Audio-visual&quot; group=&quot;RGB LED Module&quot;" line3283="" line3284="        //% color=#2699BF blockGap=10" line3285="" line3286="        setBrightness(brightness: number): void {" line3287="" line3288="            this.brightness = brightness &amp; 0xff;" line3289="" line3290="        }" line3291="" line3292="" line3293="" line3294="        /**" line3295="    " line3296="         * Set the pin where the neopixel is connected, defaults to P0." line3297="    " line3298="         */" line3299="" line3300="        //% parts=&quot;neopixel&quot; subcategory=&quot;Audio-visual&quot; group=&quot;RGB LED Module&quot;" line3301="" line3302="        //% color=#2699BF blockGap=10" line3303="" line3304="        setPin(pin: DigitalPin): void {" line3305="" line3306="" line3307="" line3308="            this.pin = pin;" line3309="" line3310="            pins.digitalWritePin(this.pin, 0);" line3311="" line3312="            // don't yield to avoid races on initialization" line3313="" line3314="        }" line3315="" line3316="" line3317="" line3318="" line3319="" line3320="" line3321="" line3322="        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {" line3323="" line3324="            if (this._mode === NeoPixelMode.RGB_RGB) {" line3325="" line3326="                this.buf[offset + 0] = red;" line3327="" line3328="                this.buf[offset + 1] = green;" line3329="" line3330="            } else {" line3331="" line3332="                this.buf[offset + 0] = green;" line3333="" line3334="                this.buf[offset + 1] = red;" line3335="" line3336="            }" line3337="" line3338="            this.buf[offset + 2] = blue;" line3339="" line3340="        }" line3341="" line3342="" line3343="" line3344="        private setAllRGB(rgb: number) {" line3345="" line3346="            let red = unpackR(rgb);" line3347="" line3348="            let green = unpackG(rgb);" line3349="" line3350="            let blue = unpackB(rgb);" line3351="" line3352="" line3353="" line3354="            const br3 = this.brightness;" line3355="" line3356="            if (br3 &lt; 255) {" line3357="" line3358="                red = (red * br3) &gt;&gt; 8;" line3359="" line3360="                green = (green * br3) &gt;&gt; 8;" line3361="" line3362="                blue = (blue * br3) &gt;&gt; 8;" line3363="" line3364="            }" line3365="" line3366="            const end3 = this.start + this._length;" line3367="" line3368="            const stride6 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line3369="" line3370="            for (let i5 = this.start; i5 &lt; end3; ++i5) {" line3371="" line3372="                this.setBufferRGB(i5 * stride6, red, green, blue)" line3373="" line3374="            }" line3375="" line3376="        }" line3377="" line3378="        private setAllW(white: number) {" line3379="" line3380="            if (this._mode !== NeoPixelMode.RGBW)" line3381="" line3382="                return;" line3383="" line3384="" line3385="" line3386="            let br4 = this.brightness;" line3387="" line3388="            if (br4 &lt; 255) {" line3389="" line3390="                white = (white * br4) &gt;&gt; 8;" line3391="" line3392="            }" line3393="" line3394="            let buf8 = this.buf;" line3395="" line3396="            let end4 = this.start + this._length;" line3397="" line3398="            for (let i6 = this.start; i6 &lt; end4; ++i6) {" line3399="" line3400="                let ledoffset3 = i6 * 4;" line3401="" line3402="                buf8[ledoffset3 + 3] = white;" line3403="" line3404="            }" line3405="" line3406="        }" line3407="" line3408="        private setPixelRGB(pixeloffset: number, rgb: number): void {" line3409="" line3410="            if (pixeloffset &lt; 0" line3411="" line3412="                || pixeloffset &gt;= this._length)" line3413="" line3414="                return;" line3415="" line3416="" line3417="" line3418="            let stride7 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line3419="" line3420="            pixeloffset = (pixeloffset + this.start) * stride7;" line3421="" line3422="" line3423="" line3424="            let red2 = unpackR(rgb);" line3425="" line3426="            let green2 = unpackG(rgb);" line3427="" line3428="            let blue2 = unpackB(rgb);" line3429="" line3430="" line3431="" line3432="            let br5 = this.brightness;" line3433="" line3434="            if (br5 &lt; 255) {" line3435="" line3436="                red2 = (red2 * br5) &gt;&gt; 8;" line3437="" line3438="                green2 = (green2 * br5) &gt;&gt; 8;" line3439="" line3440="                blue2 = (blue2 * br5) &gt;&gt; 8;" line3441="" line3442="            }" line3443="" line3444="            this.setBufferRGB(pixeloffset, red2, green2, blue2)" line3445="" line3446="        }" line3447="" line3448="        private setPixelW(pixeloffset: number, white: number): void {" line3449="" line3450="            if (this._mode !== NeoPixelMode.RGBW)" line3451="" line3452="                return;" line3453="" line3454="" line3455="" line3456="            if (pixeloffset &lt; 0" line3457="" line3458="                || pixeloffset &gt;= this._length)" line3459="" line3460="                return;" line3461="" line3462="" line3463="" line3464="            pixeloffset = (pixeloffset + this.start) * 4;" line3465="" line3466="" line3467="" line3468="            let br6 = this.brightness;" line3469="" line3470="            if (br6 &lt; 255) {" line3471="" line3472="                white = (white * br6) &gt;&gt; 8;" line3473="" line3474="            }" line3475="" line3476="            let buf9 = this.buf;" line3477="" line3478="            buf9[pixeloffset + 3] = white;" line3479="" line3480="        }" line3481="" line3482="    }" line3483="" line3484="" line3485="" line3486="    /**" line3487="    " line3488="     * Create a new NeoPixel driver for `numleds` LEDs." line3489="    " line3490="     * @param pin the pin where the neopixel is connected." line3491="    " line3492="     * @param numleds number of leds in the strip, eg: 8,30,60,64" line3493="    " line3494="     */" line3495="" line3496="    //% blockId=&quot;neopixel_create&quot; block=&quot;Set color to using the LED ring-light port %neopixelpin &quot;" line3497="" line3498="    //% parts=&quot;neopixel&quot; subcategory=&quot;Audio-visual&quot; group=&quot;RGB LED Module&quot;" line3499="" line3500="    //% neopixelpin.fieldEditor=&quot;gridpicker&quot;" line3501="" line3502="    //% neopixelpin.fieldOptions.width=220" line3503="" line3504="    //% neopixelpin.fieldOptions.columns=2" line3505="" line3506="    //% weight=18" line3507="" line3508="    //% trackArgs=0,2" line3509="" line3510="    //% blockSetVariable=strip" line3511="" line3512="    //% color=#2699BF blockGap=10" line3513="" line3514="    //% weight=51" line3515="" line3516="    export function create(neopixelpin: Write_pin): Strip {" line3517="" line3518="        let strip2 = new Strip();" line3519="" line3520="        let stride8 = NeoPixelMode.RGBW ? 4 : 3;" line3521="" line3522="        strip2.buf = pins.createBuffer(8 * stride8);" line3523="" line3524="        strip2.start = 0;" line3525="" line3526="        strip2._length = 8;" line3527="" line3528="        strip2._mode = NeoPixelMode.RGB;" line3529="" line3530="        strip2._matrixWidth = 0;" line3531="" line3532="        strip2.setBrightness(128)" line3533="" line3534="        if (neopixelpin == 1) {" line3535="" line3536="            strip2.setPin(DigitalPin.P0);" line3537="" line3538="        }" line3539="" line3540="        if (neopixelpin == 2) {" line3541="" line3542="            strip2.setPin(DigitalPin.P16);" line3543="" line3544="        }" line3545="" line3546="        if (neopixelpin == 3) {" line3547="" line3548="            strip2.setPin(DigitalPin.P1);" line3549="" line3550="        }" line3551="" line3552="        if (neopixelpin == 4) {" line3553="" line3554="            strip2.setPin(DigitalPin.P12);" line3555="" line3556="        }" line3557="" line3558="        if (neopixelpin == 5) {" line3559="" line3560="            strip2.setPin(DigitalPin.P2);" line3561="" line3562="        }" line3563="" line3564="        if (neopixelpin == 6) {" line3565="" line3566="            strip2.setPin(DigitalPin.P8);" line3567="" line3568="        }" line3569="" line3570="" line3571="" line3572="        return strip2;" line3573="" line3574="    }" line3575="" line3576="" line3577="" line3578="    /**" line3579="    " line3580="     * Converts red, green, blue channels into a RGB color" line3581="    " line3582="     * @param red value of the red channel between 0 and 255. eg: 255" line3583="    " line3584="     * @param green value of the green channel between 0 and 255. eg: 255" line3585="    " line3586="     * @param blue value of the blue channel between 0 and 255. eg: 255" line3587="    " line3588="     */" line3589="" line3590="    //% blockId=&quot;neopixel_rgb&quot; block=&quot;red %red|green %green|blue %blue&quot;" line3591="" line3592="    //% parts=&quot;neopixel&quot; subcategory=&quot;Audio-visual&quot; group=&quot;RGB LED Module&quot;" line3593="" line3594="    //% weight=12" line3595="" line3596="    //% color=#2699BF blockGap=10" line3597="" line3598="    export function rgb(red: number, green: number, blue: number): number {" line3599="" line3600="        return packRGB(red, green, blue);" line3601="" line3602="    }" line3603="" line3604="" line3605="" line3606="    /**" line3607="    " line3608="     * Gets the RGB value of a known color" line3609="    " line3610="    */" line3611="" line3612="    //% blockId=&quot;neopixel_colors&quot; block=&quot;%color&quot;" line3613="" line3614="    //% parts=&quot;neopixel&quot; subcategory=&quot;Audio-visual&quot; group=&quot;RGB LED Module&quot;" line3615="" line3616="    //% weight=13" line3617="" line3618="    //% color=#2699BF blockGap=10" line3619="" line3620="    export function colors(color: NeoPixelColors): number {" line3621="" line3622="        return color;" line3623="" line3624="    }" line3625="" line3626="" line3627="" line3628="    function packRGB(a: number, b: number, c: number): number {" line3629="" line3630="        return ((a &amp; 0xFF) &lt;&lt; 16) | ((b &amp; 0xFF) &lt;&lt; 8) | (c &amp; 0xFF);" line3631="" line3632="    }" line3633="" line3634="" line3635="" line3636="    function unpackR(rgb: number): number {" line3637="" line3638="        let r3 = (rgb &gt;&gt; 16) &amp; 0xFF;" line3639="" line3640="        return r3;" line3641="" line3642="    }" line3643="" line3644="" line3645="" line3646="    function unpackG(rgb: number): number {" line3647="" line3648="        let g3 = (rgb &gt;&gt; 8) &amp; 0xFF;" line3649="" line3650="        return g3;" line3651="" line3652="    }" line3653="" line3654="" line3655="" line3656="    function unpackB(rgb: number): number {" line3657="" line3658="        let b3 = (rgb) &amp; 0xFF;" line3659="" line3660="        return b3;" line3661="" line3662="    }" line3663="" line3664="" line3665="" line3666="    export function hsl(h: number, s: number, l: number): number {" line3667="" line3668="        h = Math.round(h);" line3669="" line3670="        s = Math.round(s);" line3671="" line3672="        l = Math.round(l);" line3673="" line3674="" line3675="" line3676="        h = h % 360;" line3677="" line3678="        s = Math.clamp(0, 99, s);" line3679="" line3680="        l = Math.clamp(0, 99, l);" line3681="" line3682="        let c2 = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) &lt;&lt; 8), 10000); //chroma, [0,255]" line3683="" line3684="        let h12 = Math.idiv(h, 60);//[0,6]" line3685="" line3686="        let h22 = Math.idiv((h - h12 * 60) * 256, 60);//[0,255]" line3687="" line3688="        let temp = Math.abs((((h12 % 2) &lt;&lt; 8) + h22) - 256);" line3689="" line3690="        let x = (c2 * (256 - (temp))) &gt;&gt; 8;//[0,255], second largest component of this color" line3691="" line3692="        let r$: number;" line3693="" line3694="        let g$: number;" line3695="" line3696="        let b$: number;" line3697="" line3698="        if (h12 == 0) {" line3699="" line3700="            r$ = c2; g$ = x; b$ = 0;" line3701="" line3702="        } else if (h12 == 1) {" line3703="" line3704="            r$ = x; g$ = c2; b$ = 0;" line3705="" line3706="        } else if (h12 == 2) {" line3707="" line3708="            r$ = 0; g$ = c2; b$ = x;" line3709="" line3710="        } else if (h12 == 3) {" line3711="" line3712="            r$ = 0; g$ = x; b$ = c2;" line3713="" line3714="        } else if (h12 == 4) {" line3715="" line3716="            r$ = x; g$ = 0; b$ = c2;" line3717="" line3718="        } else if (h12 == 5) {" line3719="" line3720="            r$ = c2; g$ = 0; b$ = x;" line3721="" line3722="        }" line3723="" line3724="        let m2 = Math.idiv((Math.idiv((l * 2 &lt;&lt; 8), 100) - c2), 2);" line3725="" line3726="        let r4 = r$ + m2;" line3727="" line3728="        let g4 = g$ + m2;" line3729="" line3730="        let b4 = b$ + m2;" line3731="" line3732="        return packRGB(r4, g4, b4);" line3733="" line3734="    }" line3735="" line3736="" line3737="" line3738="    export enum HueInterpolationDirection {" line3739="" line3740="        Clockwise," line3741="" line3742="        CounterClockwise," line3743="" line3744="        Shortest" line3745="" line3746="    }" line3747="" line3748="    /**" line3749="    " line3750="    * show text in OLED" line3751="    " line3752="    * @param oled_x is X alis, eg: 0" line3753="    " line3754="    * @param oled_y is Y alis, eg: 0" line3755="    " line3756="    * @param s is the text will be show, eg: 'Hello!'" line3757="    " line3758="    */" line3759="" line3760="    //% blockId=&quot;OLED12864_I2C_SHOWSTRING1&quot; block=&quot;Display text – please choose location %oled| text%s&quot;" line3761="" line3762="    //% parts=OLED12864_I2C trackArgs=0" line3763="" line3764="    //% oled.fieldEditor=&quot;gridpicker&quot;" line3765="" line3766="    //% oled.fieldOptions.width=320" line3767="" line3768="    //% oled.fieldOptions.columns=13" line3769="" line3770="    //% group=&quot;OLED Module&quot; subcategory=&quot;Audio-visual&quot;" line3771="" line3772="    //% weight=10 blockGap=10 color=#0855AA" line3773="" line3774="    export function showString(oled: Oled, s: string, color: number = 1) {" line3775="" line3776="        let oled_x = oled % 13;" line3777="" line3778="        let oled_y = Math.floor(oled / 13);" line3779="" line3780="        let crror = 0" line3781="" line3782="        let col2 = 0" line3783="" line3784="        let q = 0" line3785="" line3786="        let ind2 = 0" line3787="" line3788="        let firstoledinit = 0" line3789="" line3790="        if (pins.i2cReadNumber(_I2CAddr, NumberFormat.Int8LE) == 67) {" line3791="" line3792="            init();" line3793="" line3794="        }" line3795="" line3796="        else {" line3797="" line3798="            for (let r = 0; r &lt; s.length; r++) {" line3799="" line3800="                q = font[s.charCodeAt(r)]" line3801="" line3802="                for (let o = 0; o &lt; 5; o++) {" line3803="" line3804="                    col2 = 0" line3805="" line3806="                    for (let p = 0; p &lt; 5; p++) {" line3807="" line3808="                        if (q &amp; (1 &lt;&lt; (5 * o + p)))" line3809="" line3810="                            col2 |= (1 &lt;&lt; (p + 1))" line3811="" line3812="                    }" line3813="" line3814="                    ind2 = (oled_x + r) * 5 * (_ZOOM + 1) + oled_y * 128 + o * (_ZOOM + 1) + 1" line3815="" line3816="                    if (color == 0)" line3817="" line3818="                        col2 = 255 - col2" line3819="" line3820="                    _screen[ind2] = col2" line3821="" line3822="                    if (_ZOOM)" line3823="" line3824="                        _screen[ind2 + 1] = col2" line3825="" line3826="                }" line3827="" line3828="            }" line3829="" line3830="            set_pos(oled_x * 5, oled_y)" line3831="" line3832="            let ind02 = oled_x * 5 * (_ZOOM + 1) + oled_y * 128" line3833="" line3834="            let buf72 = _screen.slice(ind02, ind2 + 1)" line3835="" line3836="            buf72[0] = 0x40" line3837="" line3838="            pins.i2cWriteBuffer(_I2CAddr, buf72)" line3839="" line3840="        }" line3841="" line3842="    }" line3843="" line3844="" line3845="" line3846="    /**" line3847="    " line3848="     * show a number in OLED" line3849="    " line3850="     * @param olednum_x is X alis, eg: 0" line3851="    " line3852="     * @param olednum_y is Y alis, eg: 0" line3853="    " line3854="     * @param num is the number will be show, eg: 12" line3855="    " line3856="     * @param color is number color, eg: 1" line3857="    " line3858="     */" line3859="" line3860="    //% blockId=&quot;OLED12864_I2C_NUMBER&quot; block=&quot;Display number – please choose location%oled| number%num&quot;" line3861="" line3862="    //% parts=OLED12864_I2C trackArgs=0" line3863="" line3864="    //% olednum.fieldEditor=&quot;gridpicker&quot;" line3865="" line3866="    //% olednum.fieldOptions.width=320" line3867="" line3868="    //% olednum.fieldOptions.columns=13" line3869="" line3870="    //% group=&quot;OLED Module&quot; subcategory=&quot;Audio-visual&quot;" line3871="" line3872="    //% weight=9 blockGap=10 color=#0855AA" line3873="" line3874="    export function showNumber(olednum: Oled, num: number, color: number = 1) {" line3875="" line3876="" line3877="" line3878="        let olednum_x = 0" line3879="" line3880="        let olednum_y = 0" line3881="" line3882="        olednum_x = Math.floor(olednum / 13);" line3883="" line3884="        olednum_y = olednum % 13;" line3885="" line3886="        showString(olednum, num.toString(), color)" line3887="" line3888="    }" line3889="" line3890="" line3891="" line3892="" line3893="" line3894="    export function draw() {" line3895="" line3896="        set_pos()" line3897="" line3898="        pins.i2cWriteBuffer(_I2CAddr, _screen)" line3899="" line3900="    }" line3901="" line3902="    /**" line3903="     * show text in OLED" line3904="     * @param x is X alis, eg: 0" line3905="     * @param y is Y alis, eg: 0" line3906="     * @param s is the text will be show, eg: 'Hello!'" line3907="     * @param color is string color, eg: 1" line3908="     */" line3909="    //% blockId=&quot;OLED12864_I2C_SHOWSTRINGxy&quot; block=&quot;Display string at x %x|y %y|at %s|color %color&quot;" line3910="    //% parts=OLED12864_I2C trackArgs=0" line3911="    //% group=&quot;OLED Module&quot; subcategory=&quot;Audio-visual&quot;" line3912="    //% weight=80 blockGap=10 color=#0855AA" line3913="    export function showStringxy(x: number, y: number, s: string, color: number = 1) {" line3914="        let col = 0" line3915="        let e = 0" line3916="        let ind = 0" line3917="        for (let f = 0; f &lt; s.length; f++) {" line3918="            e = font[s.charCodeAt(f)]" line3919="            for (let g = 0; g &lt; 5; g++) {" line3920="                col = 0" line3921="                for (let h = 0; h &lt; 5; h++) {" line3922="                    if (e &amp; (1 &lt;&lt; (5 * g + h)))" line3923="                        col |= (1 &lt;&lt; (h + 1))" line3924="                }" line3925="                ind = (x + f) * 5 * (_ZOOM + 1) + y * 128 + g * (_ZOOM + 1) + 1" line3926="                if (color == 0)" line3927="                    col = 255 - col" line3928="                _screen[ind] = col" line3929="                if (_ZOOM)" line3930="                    _screen[ind + 1] = col" line3931="            }" line3932="        }" line3933="        set_pos(x * 5, y)" line3934="        let ind0 = x * 5 * (_ZOOM + 1) + y * 128" line3935="        let buf7 = _screen.slice(ind0, ind + 1)" line3936="        buf7[0] = 0x40" line3937="        pins.i2cWriteBuffer(_I2CAddr, buf7)" line3938="    }" line3939="" line3940="    /**" line3941="     * show a number in OLED" line3942="     * @param x is X alis, eg: 0" line3943="     * @param y is Y alis, eg: 0" line3944="     * @param num is the number will be show, eg: 12" line3945="     * @param color is number color, eg: 1" line3946="     */" line3947="    //% blockId=&quot;OLED12864_I2C_NUMBERxy&quot; block=&quot;Display number at x %x|y %y|number %num|color %color&quot;" line3948="    //% parts=OLED12864_I2C trackArgs=0" line3949="    //% group=&quot;OLED Module&quot; subcategory=&quot;Audio-visual&quot;" line3950="    //% weight=80 blockGap=10 color=#0855AA" line3951="    export function showNumberxy(x: number, y: number, num: number, color: number = 1) {" line3952="        showStringxy(x, y, num.toString(), color)" line3953="    }" line3954="" line3955="" line3956="    /**" line3957="    " line3958="     * clear screen" line3959="    " line3960="     */" line3961="" line3962="    //% blockId=&quot;OLED12864_I2C_CLEAR&quot; block=&quot;clear&quot;" line3963="" line3964="    //% parts=OLED12864_I2C trackArgs=0" line3965="" line3966="    //% group=&quot;OLED Module&quot; subcategory=&quot;Audio-visual&quot;" line3967="" line3968="    //% weight=8 blockGap=10 color=#0855AA" line3969="" line3970="    export function clear() {" line3971="" line3972="        _screen.fill(0)" line3973="" line3974="        _screen[0] = 0x40" line3975="" line3976="        draw()" line3977="" line3978="    }" line3979="" line3980="" line3981="" line3982="    /**" line3983="    " line3984="     * OLED initialize" line3985="    " line3986="     * @param addr is i2c addr, eg: 60" line3987="    " line3988="     */" line3989="" line3990="    //% blockId=&quot;OLED12864_I2C_init&quot; block=&quot;Initialize OLED &quot;" line3991="" line3992="    //% parts=OLED12864_I2C trackArgs=0" line3993="" line3994="    //% weight=11 blockGap=10" line3995="" line3996="    //% group=&quot;OLED Module&quot; subcategory=&quot;Audio-visual&quot;" line3997="" line3998="    //% blockGap=10  color=#0855AA" line3999="" line4000="    export function init() {" line4001="" line4002="        _I2CAddr = 60;" line4003="" line4004="        cmd1(0xAE)       // SSD1306_DISPLAYOFF" line4005="" line4006="        cmd1(0xA4)       // SSD1306_DISPLAYALLON_RESUME" line4007="" line4008="        cmd2(0xD5, 0xF0) // SSD1306_SETDISPLAYCLOCKDIV" line4009="" line4010="        cmd2(0xA8, 0x3F) // SSD1306_SETMULTIPLEX" line4011="" line4012="        cmd2(0xD3, 0x00) // SSD1306_SETDISPLAYOFFSET" line4013="" line4014="        cmd1(0 | 0x0)    // line #SSD1306_SETSTARTLINE" line4015="" line4016="        cmd2(0x8D, 0x14) // SSD1306_CHARGEPUMP" line4017="" line4018="        cmd2(0x20, 0x00) // SSD1306_MEMORYMODE" line4019="" line4020="        cmd3(0x21, 0, 127) // SSD1306_COLUMNADDR" line4021="" line4022="        cmd3(0x22, 0, 63)  // SSD1306_PAGEADDR" line4023="" line4024="        cmd1(0xa0 | 0x1) // SSD1306_SEGREMAP" line4025="" line4026="        cmd1(0xc8)       // SSD1306_COMSCANDEC" line4027="" line4028="        cmd2(0xDA, 0x12) // SSD1306_SETCOMPINS" line4029="" line4030="        cmd2(0x81, 0xCF) // SSD1306_SETCONTRAST" line4031="" line4032="        cmd2(0xd9, 0xF1) // SSD1306_SETPRECHARGE" line4033="" line4034="        cmd2(0xDB, 0x40) // SSD1306_SETVCOMDETECT" line4035="" line4036="        cmd1(0xA6)       // SSD1306_NORMALDISPLAY" line4037="" line4038="        cmd2(0xD6, 1)    // zoom on" line4039="" line4040="        cmd1(0xAF)       // SSD1306_DISPLAYON" line4041="" line4042="        clear()" line4043="" line4044="        _ZOOM = 1" line4045="" line4046="    }" line4047="" line4048="    //% blockId=&quot;laser_controller&quot; block=&quot;Laser %laserpin switch %laserState || Laser %intensity&quot;" line4049="" line4050="    //% laserState.shadow=&quot;toggleOnOff&quot;" line4051="" line4052="    //% weight=25" line4053="" line4054="    //% laserpin.fieldEditor=&quot;gridpicker&quot;" line4055="" line4056="    //% laserpin.fieldOptions.width=220" line4057="" line4058="    //% laserpin.fieldOptions.columns=2" line4059="" line4060="    //% intensity.min=0 intensity.max=1023" line4061="" line4062="    //% expandableArgumentMode=&quot;toggle&quot;" line4063="" line4064="    //% subcategory=&quot;Audio-visual&quot; group=&quot;Laser Module&quot;" line4065="" line4066="    export function laserController(laserpin: Write_pin, laserState: boolean, intensity: number = 1023): void {" line4067="" line4068="        let pin79" line4069="" line4070="        if (laserpin == 1) {" line4071="" line4072="" line4073="" line4074="            pin79 = AnalogPin.P0;" line4075="" line4076="        }" line4077="" line4078="        if (laserpin == 2) {" line4079="" line4080="            pin79 = AnalogPin.P16;" line4081="" line4082="        }" line4083="" line4084="        if (laserpin == 3) {" line4085="" line4086="            pin79 = AnalogPin.P1;" line4087="" line4088="        }" line4089="" line4090="        if (laserpin == 4) {" line4091="" line4092="" line4093="" line4094="            pin79 = AnalogPin.P12;" line4095="" line4096="        }" line4097="" line4098="        if (laserpin == 5) {" line4099="" line4100="            pin79 = AnalogPin.P2;" line4101="" line4102="        }" line4103="" line4104="        if (laserpin == 6) {" line4105="" line4106="            pin79 = AnalogPin.P8;" line4107="" line4108="        }" line4109="" line4110="        if (laserState) {" line4111="" line4112="            pins.analogSetPeriod(pin79, 1023);" line4113="" line4114="            pins.analogWritePin(pin79, Math.map(intensity, 0, 1023, 0, 1023));" line4115="" line4116="        }" line4117="" line4118="        else {" line4119="" line4120="            pins.analogWritePin(pin79, 0);" line4121="" line4122="            intensity = 0;" line4123="" line4124="        }" line4125="" line4126="    }" line4127="" line4128="    /////////////////录音模块///////////////////" line4129="" line4130="" line4131="    //% blockId=&quot;record_id&quot; block=&quot;Recording Module play %recordID &quot;" line4132="" line4133="    //% magState.shadow=&quot;toggleOnOff&quot;" line4134="" line4135="    //% weight=2" line4136="" line4137="    //% recordID.fieldEditor=&quot;gridpicker&quot;" line4138="" line4139="    //% recordID.fieldOptions.width=220" line4140="" line4141="    //% recordID.fieldOptions.columns=2" line4142="" line4143="    //% expandableArgumentMode=&quot;toggle&quot;" line4144="" line4145="    //% group=&quot;Recording Module&quot; subcategory=&quot;Audio-visual&quot;" line4146="" line4147="    export function Record_id(recordID: Record_list): void {" line4148="        pins.i2cWriteNumber(0x18, recordID, NumberFormat.UInt8BE)" line4149="    }" line4150="" line4151="" line4152="" line4153="    enum Recodpin {" line4154="        //% block=&quot;(P0,P13)&quot;" line4155="" line4156="        rc1 = 13," line4157="        //% block=&quot;(P1,P14)&quot;" line4158="" line4159="        rc2 = 114," line4160="" line4161="        //% block=&quot;(P2,P15)&quot;" line4162="" line4163="        rc3 = 215" line4164="    }" line4165="" line4166="}" numlines="4167"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>